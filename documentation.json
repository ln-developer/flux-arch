{
    "pipes": [],
    "interfaces": [
        {
            "name": "ArrayFormModel",
            "id": "interface-ArrayFormModel-d7cec1c315a5e4b66b901566f24cc5be21b832f914a8dc91866006b2afb40ab5d8324b36a83a88fa79253b5dd50f2cafbf3ff8a374150d39fd901ca3903ab7bd",
            "file": "src/app/forms/ui/array/utils/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CountryDictContent } from \"@shared/types\";\n\nexport interface ArrayFormModel {\n  testAutocomplete: CountryDictContent;\n  testSelect: string;\n  testInputYear: Date;\n  testMaskedInput: string;\n}\n",
            "properties": [
                {
                    "name": "testAutocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CountryDictContent",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "testInputYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "testMaskedInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "testSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BaseDaDataResponse",
            "id": "interface-BaseDaDataResponse-75b6c114bc607c68ab5562a5126a0d4ce2a16eb599195676ce3772e215c832f25eb12b54c274497ead3b44a838b9b5d076154ce20802b4c42ad49e3baa933753",
            "file": "src/app/shared/utils/types/dadata.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDaDataResponse<T> {\n  suggestions: Array<T>;\n}\n\nexport interface DaDataAddress {\n  value: string;\n  unrestricted_value: string;\n  data: {\n    postal_code: string;\n    country: string;\n    region: string;\n    city_with_type: string;\n    city: string;\n    settlement_with_type: string;\n    settlement: string;\n    street_with_type: string;\n    street: string;\n    house: string;\n    flat: string;\n  };\n}\n\nexport interface DaDataParty {\n  value: string;\n  unrestricted_value: string;\n  data: {\n    kpp: string;\n    type: string;\n    opf: {\n      type: string;\n      code: string;\n      full: string;\n      short: string;\n    };\n    name: {\n      full_with_opf: string;\n      short_with_opf: string;\n      full: string;\n      short: string;\n    };\n    inn: string;\n    ogrn: string;\n    address: DaDataAddress;\n  }\n}",
            "properties": [
                {
                    "name": "suggestions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BaseDictContent",
            "id": "interface-BaseDictContent-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BaseDictResponse",
            "id": "interface-BaseDictResponse-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CodeDictContent",
            "id": "interface-CodeDictContent-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseDictContent"
            ]
        },
        {
            "name": "CountryDictContent",
            "id": "interface-CountryDictContent-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "full_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "oksm_alpha2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "oksm_alpha3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "CodeDictContent"
            ]
        },
        {
            "name": "DaDataAddress",
            "id": "interface-DaDataAddress-75b6c114bc607c68ab5562a5126a0d4ce2a16eb599195676ce3772e215c832f25eb12b54c274497ead3b44a838b9b5d076154ce20802b4c42ad49e3baa933753",
            "file": "src/app/shared/utils/types/dadata.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDaDataResponse<T> {\n  suggestions: Array<T>;\n}\n\nexport interface DaDataAddress {\n  value: string;\n  unrestricted_value: string;\n  data: {\n    postal_code: string;\n    country: string;\n    region: string;\n    city_with_type: string;\n    city: string;\n    settlement_with_type: string;\n    settlement: string;\n    street_with_type: string;\n    street: string;\n    house: string;\n    flat: string;\n  };\n}\n\nexport interface DaDataParty {\n  value: string;\n  unrestricted_value: string;\n  data: {\n    kpp: string;\n    type: string;\n    opf: {\n      type: string;\n      code: string;\n      full: string;\n      short: string;\n    };\n    name: {\n      full_with_opf: string;\n      short_with_opf: string;\n      full: string;\n      short: string;\n    };\n    inn: string;\n    ogrn: string;\n    address: DaDataAddress;\n  }\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "unrestricted_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DaDataParty",
            "id": "interface-DaDataParty-75b6c114bc607c68ab5562a5126a0d4ce2a16eb599195676ce3772e215c832f25eb12b54c274497ead3b44a838b9b5d076154ce20802b4c42ad49e3baa933753",
            "file": "src/app/shared/utils/types/dadata.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDaDataResponse<T> {\n  suggestions: Array<T>;\n}\n\nexport interface DaDataAddress {\n  value: string;\n  unrestricted_value: string;\n  data: {\n    postal_code: string;\n    country: string;\n    region: string;\n    city_with_type: string;\n    city: string;\n    settlement_with_type: string;\n    settlement: string;\n    street_with_type: string;\n    street: string;\n    house: string;\n    flat: string;\n  };\n}\n\nexport interface DaDataParty {\n  value: string;\n  unrestricted_value: string;\n  data: {\n    kpp: string;\n    type: string;\n    opf: {\n      type: string;\n      code: string;\n      full: string;\n      short: string;\n    };\n    name: {\n      full_with_opf: string;\n      short_with_opf: string;\n      full: string;\n      short: string;\n    };\n    inn: string;\n    ogrn: string;\n    address: DaDataAddress;\n  }\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "unrestricted_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DictionaryStateModel",
            "id": "interface-DictionaryStateModel-74365ecab1c8b7e3fa8a7775c4570d4d0e580ee234351996cabf575fd9ccf05914d86648eae342b057b0ea3649808dc9a17e50ba46fe166456679dd6430e46ab",
            "file": "src/app/store/dictionary/dictionary.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { tap } from 'rxjs';\n\nimport { Dictionary } from './dictionary.actions';\nimport { DictionaryService } from '../../shared/utils/services/dictionary.service';\nimport { CountryDictContent, KeyDictContent } from '../../shared/utils/types/dictionary.types';\nimport { FormsState } from 'src/app/forms/store/forms.state';\nimport { FormsStateModel } from 'src/app/forms/store/forms.types';\n\nexport interface DictionaryStateModel {\n  vehicleCategory: Array<string>;\n  placeOfRegistration: Array<KeyDictContent<number>>;\n  country: Array<CountryDictContent>;\n  vehiclePurpose: Array<KeyDictContent<number>>;\n  vehicleDocType: Array<KeyDictContent<number>>;\n}\n\nconst defaults: DictionaryStateModel = {\n  vehicleCategory: [],\n  placeOfRegistration: [],\n  country: [],\n  vehiclePurpose: [],\n  vehicleDocType: [],\n};\n\n@State<DictionaryStateModel>({\n  name: 'dictionary',\n  defaults\n})\n@Injectable()\nexport class DictionaryState {\n  @Selector([FormsState])\n  public static filteredCountryList(state: DictionaryStateModel, formsState: FormsStateModel) {\n    const countryOfRegistration = formsState.groupForm.model?.testAutocomplete ?? '';\n    const strLower = typeof countryOfRegistration === 'string'\n      ? countryOfRegistration.toLowerCase()\n      : countryOfRegistration.name.toLowerCase();\n    return state.country.filter(option => option.name.toLowerCase().includes(strLower));\n  }\n\n  constructor(private readonly dictionary: DictionaryService) {}\n\n  @Action(Dictionary.GetVehicleCategory)\n  public getVehicleCategoryList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getVehicleCategoryList()\n      .pipe(tap(vehicleCategory => {\n        ctx.setState(state => ({ ...state, vehicleCategory }))\n      }))\n  }\n\n  @Action(Dictionary.GetPlaceOfRegistartion)\n  public getPlaceOfRegistartionList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getPlaceOfRegistartionList()\n      .pipe(tap(placeOfRegistration => {\n        ctx.setState(state => ({ ...state, placeOfRegistration }))\n      }))\n  }\n\n  @Action(Dictionary.GetCountry)\n  public getCountryList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getCountryList()\n      .pipe(tap(country => {\n        ctx.setState(state => ({ ...state, country }))\n      }))\n  }\n\n  @Action(Dictionary.GetVehiclePurpose)\n  public getVehiclePurposeList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getVehiclePurposeList()\n      .pipe(tap(vehiclePurpose => {\n        ctx.setState(state => ({ ...state, vehiclePurpose }))\n      }))\n  }\n\n  @Action(Dictionary.GetVehicleDocType)\n  public getVehicleDocTypeList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getVehicleDocTypeList()\n      .pipe(tap(vehicleDocType => {\n        ctx.setState(state => ({ ...state, vehicleDocType }))\n      }))\n  }\n}\n",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CountryDictContent>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "placeOfRegistration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyDictContent<number>>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "vehicleCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "vehicleDocType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyDictContent<number>>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "vehiclePurpose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyDictContent<number>>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DriversLicenceTypeDict",
            "id": "interface-DriversLicenceTypeDict-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "rsa_key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "KeyDictContent"
            ]
        },
        {
            "name": "FormModel",
            "id": "interface-FormModel-700ac4c9975116132ed1139a4a9808d043dd37ff2923ff9929a5feac1f5dad391ba8a105429a0638aea9d1da110fd1fc3a1d9009c77baf443b5040afeb39fec3",
            "file": "src/app/store/store.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormModel<T> {\n    model: undefined | T;\n    dirty: boolean,\n    status: string,\n    errors: {\n        [key: string]: unknown;\n    },\n}",
            "properties": [
                {
                    "name": "dirty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "undefined | T",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormsStateModel",
            "id": "interface-FormsStateModel-0ce5037a3be5207949361b148fcadc3d46ea0425ec900edcd61446c3b9a203e0f22fa20a7ae10355d3d8a5cbdcda7c838dd8163790d255ea952a4ecd99d2a9a6",
            "file": "src/app/forms/store/forms.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormModel } from \"@store/store.types\";\n\nimport { ArrayFormModel, GroupFormModel, NestedFormModel } from \"../ui\";\n\nexport interface FormsStateModel {\n  groupForm: FormModel<GroupFormModel>;\n  nestedForm: FormModel<NestedFormModel>;\n  arrayForm: FormModel<ArrayFormModel>;\n}\n",
            "properties": [
                {
                    "name": "arrayForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormModel<ArrayFormModel>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "groupForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormModel<GroupFormModel>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "nestedForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormModel<NestedFormModel>",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FullNameModel",
            "id": "interface-FullNameModel-6be553c5cdc0bf0c50209517461b9fa0afab0c77860081f6a39003f6365dfe5f36e375d75989c2212d55bc75ad2491b7d536f1364816764c5db0c502d30c8958",
            "file": "src/app/shared/ui/forms/full-name/utils/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FullNameModel {\n  lastName: string;\n  firstName: string;\n  middleName: string;\n}\n",
            "properties": [
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "middleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GroupFormModel",
            "id": "interface-GroupFormModel-7a4603474e44f8542f72e60d1568137dd0919dc6d5cff55d6f058bc8560b73e82b09e0bf827b70aa5337187566d0ebb36d3c2a3605e845eee6a8a2b01b69d121",
            "file": "src/app/forms/ui/group/utils/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CountryDictContent } from \"@shared/types\";\n\nexport interface GroupFormModel {\n  testAutocomplete: CountryDictContent;\n  testSelect: string;\n  testInputYear: Date;\n  testMaskedInput: string;\n}\n",
            "properties": [
                {
                    "name": "testAutocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CountryDictContent",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "testInputYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "testMaskedInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "testSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InternalNsiTypeDict",
            "id": "interface-InternalNsiTypeDict-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"year\" | \"month\" | \"day\"",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "KeyDictContent",
            "id": "interface-KeyDictContent-e4a1bdf01b96d5ce89ef9f6ae099de4e732b168ca66ed79ada5c7ba558bfabdd323e19c1a834125c46e504b061f3c5720a05e0c096e31107f54cd53a827356b8",
            "file": "src/app/shared/utils/types/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BaseDictContent {\n  id: number;\n  name: string;\n}\n\nexport interface KeyDictContent<T> extends BaseDictContent {\n  key: T;\n}\n\nexport interface CodeDictContent<T> extends BaseDictContent {\n  code: T;\n}\n\nexport interface BaseDictResponse<T> {\n  content: Array<T>;\n}\n\nexport interface CountryDictContent extends CodeDictContent<string> {\n  full_name: string;\n  oksm_alpha3: string;\n  oksm_alpha2: string;\n}\n\nexport interface DriversLicenceTypeDict extends KeyDictContent<number> {\n  rsa_key: number;\n}\n\nexport interface InternalNsiTypeDict {\n  name: string;\n  amount: number;\n  unit: 'year' | 'month' | 'day';\n}",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseDictContent"
            ]
        },
        {
            "name": "MainStateModel",
            "id": "interface-MainStateModel-db171de83ad19bcb72e398d938346f03d41ee8b71c6dc105bf18a7ab1fd0c5020831c01f6b67d6e453765be2e3ea127f669b96018e4ece4bd3b309e4b44d3ac9",
            "file": "src/app/main/store/main.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Post } from \"../../shared/utils/types/external-api.types\";\n\nexport interface MainStateModel {\n  posts: Array<Post>\n}",
            "properties": [
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Post>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NestedFormModel",
            "id": "interface-NestedFormModel-99bdc2abc7ea0db4e5127aff67bfc9b4b5a0dbcb81f0f914a549a8a16482410ad1e4b97ae25de352abef42c0a0c2334162c4e221bc910d8f46987c7c8ae151d6",
            "file": "src/app/forms/ui/nested/utils/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GENDER } from \"@shared/consts\";\nimport { FullNameModel } from \"@shared/forms\";\nimport { DaDataAddress } from \"@shared/types\";\n\nexport interface NestedFormModel {\n  gender: GENDER;\n  fullName: FullNameModel;\n  birthDate: Date;\n  address: DaDataAddress;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DaDataAddress",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FullNameModel",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GENDER",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Post",
            "id": "interface-Post-82ec58f6ea414cb7a1afc6cab5464466b8505cc58bf26d15dc0394521316f7a3588581c9f2dae1b55b261cc0b96ead535c74e36feb55215e2682cca53c54272d",
            "file": "src/app/shared/utils/types/external-api.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: UserAddress;\n  phone: string;\n  website: string;\n  company: UserCompany;\n}\n\nexport interface UserAddress {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n}\n\nexport interface UserCompany {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RadioBtnOption",
            "id": "interface-RadioBtnOption-2c91366e2942eedfd55248fed42848e37f31078071759c7c1c80e62013fa446141ef890f80041e6e4f8a729a83a9a4471a7ddc28ea55b317c39619144511dc5b",
            "file": "src/app/shared/ui/components/radio-button-group/radio-button-group.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RadioBtnOption {\n    viewValue: string;\n    value: string;\n}",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "viewValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-82ec58f6ea414cb7a1afc6cab5464466b8505cc58bf26d15dc0394521316f7a3588581c9f2dae1b55b261cc0b96ead535c74e36feb55215e2682cca53c54272d-1",
            "file": "src/app/shared/utils/types/external-api.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: UserAddress;\n  phone: string;\n  website: string;\n  company: UserCompany;\n}\n\nexport interface UserAddress {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n}\n\nexport interface UserCompany {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserAddress",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserCompany",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "UserAddress",
            "id": "interface-UserAddress-82ec58f6ea414cb7a1afc6cab5464466b8505cc58bf26d15dc0394521316f7a3588581c9f2dae1b55b261cc0b96ead535c74e36feb55215e2682cca53c54272d",
            "file": "src/app/shared/utils/types/external-api.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: UserAddress;\n  phone: string;\n  website: string;\n  company: UserCompany;\n}\n\nexport interface UserAddress {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n}\n\nexport interface UserCompany {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "suite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "zipcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserCompany",
            "id": "interface-UserCompany-82ec58f6ea414cb7a1afc6cab5464466b8505cc58bf26d15dc0394521316f7a3588581c9f2dae1b55b261cc0b96ead535c74e36feb55215e2682cca53c54272d",
            "file": "src/app/shared/utils/types/external-api.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: UserAddress;\n  phone: string;\n  website: string;\n  company: UserCompany;\n}\n\nexport interface UserAddress {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n}\n\nexport interface UserCompany {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n",
            "properties": [
                {
                    "name": "bs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "catchPhrase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserStateModel",
            "id": "interface-UserStateModel-34e1847afc09c4bb00f9298959ad889595d65a228a30119146f13b781972cceefa6d7d19cd874bf2d8df7bb948701576ee10282d0f3280e4561ed7ba344eef50",
            "file": "src/app/store/user/user.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\n\nimport { tap } from 'rxjs';\n\nimport { GetUser, GetUsers } from './user.actions';\nimport { User } from '../../shared/utils/types/external-api.types';\nimport { ExternalApiService } from '../../shared/utils/services/external-api.service';\nimport { EntityState } from '../../shared/utils/classes/entity-base-state.class';\n\nexport interface UserStateModel {\n  entity: User | null;\n  entities: User[];\n}\n\nconst defaults: UserStateModel = {\n  entity: null,\n  entities: [],\n};\n\n@State<UserStateModel>({\n  name: 'user',\n  defaults\n})\n@Injectable()\nexport class UserState extends EntityState {\n  @Selector()\n  public static userIds(state: UserStateModel) {\n    return Array.from(new Set(state.entities.map(entity => entity.id)));\n  }\n\n  constructor(private readonly external: ExternalApiService) {\n    super();\n  }\n\n  @Action(GetUser)\n  public getUserInfo(ctx: StateContext<UserStateModel>, { userId }: GetUser) {\n    return this.external.getUserInfo(userId)\n      .pipe(tap(entity => {\n        ctx.setState(state => ({ ...state, entity }))\n      }))\n  }\n\n  @Action(GetUsers)\n  public getUsersList(ctx: StateContext<UserStateModel>) {\n    return this.external.getUsers()\n      .pipe(tap(entities => {\n        ctx.setState(state => ({ ...state, entities }))\n      }))\n  }\n}\n",
            "properties": [
                {
                    "name": "entities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "VehicleModelsRequest",
            "id": "interface-VehicleModelsRequest-a358505773a7cceee33e0b049f88147641a96be037c7dd16994092189078ad3a97c17449b5285916353c20cf45163a4dbe6cf98f3730d600d51329e86ff6568e",
            "file": "src/app/store/dictionary/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VehicleModelsRequest {\n    sbs_category_name: string;\n    sbs_mark_name: string;\n}\n\nexport interface VehiclePowerHorseRequest extends VehicleModelsRequest {\n    sbs_model_name: string;\n}",
            "properties": [
                {
                    "name": "sbs_category_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "sbs_mark_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "VehiclePowerHorseRequest",
            "id": "interface-VehiclePowerHorseRequest-a358505773a7cceee33e0b049f88147641a96be037c7dd16994092189078ad3a97c17449b5285916353c20cf45163a4dbe6cf98f3730d600d51329e86ff6568e",
            "file": "src/app/store/dictionary/dictionary.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VehicleModelsRequest {\n    sbs_category_name: string;\n    sbs_mark_name: string;\n}\n\nexport interface VehiclePowerHorseRequest extends VehicleModelsRequest {\n    sbs_model_name: string;\n}",
            "properties": [
                {
                    "name": "sbs_model_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "VehicleModelsRequest"
            ]
        }
    ],
    "injectables": [
        {
            "name": "DadataService",
            "id": "injectable-DadataService-84a5eb454fff04459005456ae7bae6b9651af9eddd4d5b680ed3a37220e90bf4a3dd7c7e116515b8431a53f8c556723643eb9e77ce5b07e973e321f5a1b5a159",
            "file": "src/app/shared/utils/services/dadata.service.ts",
            "properties": [
                {
                    "name": "api",
                    "defaultValue": "'/suggestions/api/4_1/rs/suggest'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAddress",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<DaDataAddress>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParty",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<DaDataParty>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { BaseDaDataResponse, DaDataAddress, DaDataParty } from '../types/dadata.types';\nimport { pluckSuggestions } from '../pipes/pluck-suggestions.pipe';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DadataService {\n\n  private readonly api = '/suggestions/api/4_1/rs/suggest';\n\n  constructor(private readonly http: HttpClient) {}\n\n  public getAddress(query: string): Observable<Array<DaDataAddress>> {\n    const headers = new HttpHeaders();\n    headers.set('Authorization', 'Token 168d0ac7cdb28118dceb8613094293832885e0cd');\n    headers.set('X-Secret', '81a697bd1dd5aa044b48e611e8008077e511ee77');\n\n    return this.http.post<BaseDaDataResponse<DaDataAddress>>(`${this.api}/address`, { query }, { headers })\n      .pipe(pluckSuggestions());\n  }\n\n  public getParty(query: string): Observable<Array<DaDataParty>> {\n    const headers = new HttpHeaders();\n    headers.set('Authorization', 'Token 168d0ac7cdb28118dceb8613094293832885e0cd');\n    headers.set('X-Secret', '81a697bd1dd5aa044b48e611e8008077e511ee77');\n\n    return this.http.post<BaseDaDataResponse<DaDataParty>>(`${this.api}/party`, { query }, { headers })\n      .pipe(pluckSuggestions());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DictionaryService",
            "id": "injectable-DictionaryService-71703beac35e4ddb462d9cb769936ba43cc47d31ebaf19eb8455846a8cdecd6f5fe538b268347a000fa0602d305ea67706ad93bd2aad1ddc10f5b346a7549177",
            "file": "src/app/shared/utils/services/dictionary.service.ts",
            "properties": [
                {
                    "name": "nsiApi",
                    "defaultValue": "'/b2b/v2/nsi-gateway/api'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCountryList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<CountryDictContent>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPlaceOfRegistartionList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<KeyDictContent<number>>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getVehicleCategoryList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getVehicleDocTypeList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<KeyDictContent<number>>>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getVehicleMarkList",
                    "args": [
                        {
                            "name": "sbs_category_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "sbs_category_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehicleModelList",
                    "args": [
                        {
                            "name": "sbs_category_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sbs_mark_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "sbs_category_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sbs_mark_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehiclePowerHorse",
                    "args": [
                        {
                            "name": "sbs_category_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sbs_mark_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sbs_model_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "sbs_category_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sbs_mark_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sbs_model_name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehiclePurposeList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<KeyDictContent<number>>>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { pluckContent } from '../pipes/pluck-content.pipe';\nimport { KeyDictContent, BaseDictResponse, CountryDictContent } from '../types/dictionary.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DictionaryService {\n  private readonly nsiApi = '/b2b/v2/nsi-gateway/api';\n\n  constructor(private readonly http: HttpClient) {}\n\n  public getVehicleCategoryList(): Observable<Array<string>> {\n    return this.http.post<Array<string>>(`${this.nsiApi}/vehicle/byField/list/sbs_category_name`, {});\n  }\n\n  public getPlaceOfRegistartionList(): Observable<Array<KeyDictContent<number>>> {\n    return this.http.post<BaseDictResponse<KeyDictContent<number>>>(`${this.nsiApi}/placeregistration/list?page=0&size=10000`, {})\n      .pipe(pluckContent());\n  }\n\n  public getCountryList(): Observable<Array<CountryDictContent>> {\n    return this.http.post<BaseDictResponse<CountryDictContent>>(`${this.nsiApi}/country/list?page=0&size=10000`, {})\n      .pipe(pluckContent());\n  }\n\n  public getVehiclePurposeList(): Observable<Array<KeyDictContent<number>>> {\n    return this.http.post<BaseDictResponse<KeyDictContent<number>>>(`${this.nsiApi}/vehiclepurpose/list?page=0&size=10000`, {})\n      .pipe(pluckContent());\n  }\n\n  public getVehicleDocTypeList(): Observable<Array<KeyDictContent<number>>> {\n    return this.http.post<BaseDictResponse<KeyDictContent<number>>>(`${this.nsiApi}/vehicledoctype/list?page=0&size=10000`, {})\n      .pipe(pluckContent());\n  }\n\n  public getVehicleMarkList(sbs_category_name: string): Observable<Array<string>> {\n    return this.http.post<Array<string>>(`${this.nsiApi}/vehicle/byField/list/sbs_mark_name`, { sbs_category_name });\n  }\n\n  public getVehicleModelList(sbs_category_name: string, sbs_mark_name: string): Observable<Array<string>> {\n    return this.http.post<Array<string>>(`${this.nsiApi}/vehicle/byField/list/sbs_model_name'`, { sbs_category_name, sbs_mark_name });\n  }\n\n  public getVehiclePowerHorse(sbs_category_name: string, sbs_mark_name: string, sbs_model_name: string): Observable<Array<string>> {\n    return this.http.post<Array<string>>(`${this.nsiApi}/vehicle/byField/list/eng_pwr'`, { sbs_category_name, sbs_mark_name, sbs_model_name });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DictionaryState",
            "id": "injectable-DictionaryState-74365ecab1c8b7e3fa8a7775c4570d4d0e580ee234351996cabf575fd9ccf05914d86648eae342b057b0ea3649808dc9a17e50ba46fe166456679dd6430e46ab",
            "file": "src/app/store/dictionary/dictionary.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "filteredCountryList",
                    "args": [
                        {
                            "name": "state",
                            "type": "DictionaryStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formsState",
                            "type": "FormsStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['FormsState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "DictionaryStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formsState",
                            "type": "FormsStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCountryList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Dictionary.GetCountry"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlaceOfRegistartionList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Dictionary.GetPlaceOfRegistartion"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehicleCategoryList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Dictionary.GetVehicleCategory"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehicleDocTypeList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Dictionary.GetVehicleDocType"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehiclePurposeList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Dictionary.GetVehiclePurpose"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<DictionaryStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { tap } from 'rxjs';\n\nimport { Dictionary } from './dictionary.actions';\nimport { DictionaryService } from '../../shared/utils/services/dictionary.service';\nimport { CountryDictContent, KeyDictContent } from '../../shared/utils/types/dictionary.types';\nimport { FormsState } from 'src/app/forms/store/forms.state';\nimport { FormsStateModel } from 'src/app/forms/store/forms.types';\n\nexport interface DictionaryStateModel {\n  vehicleCategory: Array<string>;\n  placeOfRegistration: Array<KeyDictContent<number>>;\n  country: Array<CountryDictContent>;\n  vehiclePurpose: Array<KeyDictContent<number>>;\n  vehicleDocType: Array<KeyDictContent<number>>;\n}\n\nconst defaults: DictionaryStateModel = {\n  vehicleCategory: [],\n  placeOfRegistration: [],\n  country: [],\n  vehiclePurpose: [],\n  vehicleDocType: [],\n};\n\n@State<DictionaryStateModel>({\n  name: 'dictionary',\n  defaults\n})\n@Injectable()\nexport class DictionaryState {\n  @Selector([FormsState])\n  public static filteredCountryList(state: DictionaryStateModel, formsState: FormsStateModel) {\n    const countryOfRegistration = formsState.groupForm.model?.testAutocomplete ?? '';\n    const strLower = typeof countryOfRegistration === 'string'\n      ? countryOfRegistration.toLowerCase()\n      : countryOfRegistration.name.toLowerCase();\n    return state.country.filter(option => option.name.toLowerCase().includes(strLower));\n  }\n\n  constructor(private readonly dictionary: DictionaryService) {}\n\n  @Action(Dictionary.GetVehicleCategory)\n  public getVehicleCategoryList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getVehicleCategoryList()\n      .pipe(tap(vehicleCategory => {\n        ctx.setState(state => ({ ...state, vehicleCategory }))\n      }))\n  }\n\n  @Action(Dictionary.GetPlaceOfRegistartion)\n  public getPlaceOfRegistartionList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getPlaceOfRegistartionList()\n      .pipe(tap(placeOfRegistration => {\n        ctx.setState(state => ({ ...state, placeOfRegistration }))\n      }))\n  }\n\n  @Action(Dictionary.GetCountry)\n  public getCountryList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getCountryList()\n      .pipe(tap(country => {\n        ctx.setState(state => ({ ...state, country }))\n      }))\n  }\n\n  @Action(Dictionary.GetVehiclePurpose)\n  public getVehiclePurposeList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getVehiclePurposeList()\n      .pipe(tap(vehiclePurpose => {\n        ctx.setState(state => ({ ...state, vehiclePurpose }))\n      }))\n  }\n\n  @Action(Dictionary.GetVehicleDocType)\n  public getVehicleDocTypeList(ctx: StateContext<DictionaryStateModel>) {\n    return this.dictionary.getVehicleDocTypeList()\n      .pipe(tap(vehicleDocType => {\n        ctx.setState(state => ({ ...state, vehicleDocType }))\n      }))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dictionary",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "dictionary",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ExternalApiService",
            "id": "injectable-ExternalApiService-c2a930ac24f9e480db83b97fe4f3870d88bbccd72fde0a582afe6fcdf8836b56f5de9063ed7b0555b7032d6edf2d5d3d71d354af8f98f3a66e96ca06371463fa",
            "file": "src/app/shared/utils/services/external-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPosts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Post>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<User>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { Post, User } from '../types/external-api.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExternalApiService {\n\n  constructor(private readonly http: HttpClient) { }\n\n  public getPosts(): Observable<Array<Post>> {\n    return this.http.get<Array<Post>>('/posts');\n  }\n\n  public getUsers(): Observable<Array<User>> {\n    return this.http.get<Array<User>>('/users');\n  }\n\n  public getUserInfo(userId: number = 1): Observable<User> {\n    return this.http.get<User>('/users/' + userId);\n  } \n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FormsState",
            "id": "injectable-FormsState-7e506df0af07ad34d101ee65c47778cf3557ae772f92d74ee7215cbc21d6405510cb8b4e98151ac2d3f9e4c56eb771720fd053d3dcdd927bd3248a6d91fbf6d1",
            "file": "src/app/forms/store/forms.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isFormValid",
                    "args": [
                        {
                            "name": "state",
                            "type": "FormsStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(tab: number) => boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "FormsStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Selector, State } from '@ngxs/store';\n\nimport { FORM_STATUS } from '@shared/consts';\nimport { FormsStateModel } from './forms.types';\n\nconst defaults: FormsStateModel = {\n  groupForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n  nestedForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n  arrayForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n};\n\n@State<FormsStateModel>({\n  name: 'forms',\n  defaults\n})\n@Injectable()\nexport class FormsState {\n  @Selector()\n  public static isFormValid(state: FormsStateModel) {\n    return (tab: number) => {\n      switch (tab) {\n        case 1:\n          return state.groupForm.status === FORM_STATUS.VALID;\n        case 2:\n          return state.nestedForm.status === FORM_STATUS.VALID;\n        case 3:\n          return state.arrayForm.status === FORM_STATUS.VALID;\n        default:\n          return false;\n      }\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MainState",
            "id": "injectable-MainState-ef6cb39603549b06c0d7397eeca6b0a8b68172e90a36db38086cfaf36f039b02e7ed1f2771c2848d6aac1db91932ea9d65aa2c671df245c66ca597b26019ca50",
            "file": "src/app/main/store/main.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPosts",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<MainStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetPosts"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<MainStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostsList",
                    "args": [
                        {
                            "name": "state",
                            "type": "MainStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(userId: number) => any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "MainStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { tap } from 'rxjs';\n\nimport { MainStateModel } from './main.types';\nimport { GetPosts } from './main.actions';\nimport { ExternalApiService } from '../../shared/utils/services/external-api.service';\n\nconst defaults: MainStateModel = {\n  posts: [],\n};\n\n@State<MainStateModel>({\n  name: 'main',\n  defaults,\n})\n@Injectable()\nexport class MainState {\n  @Selector()\n  public static getPostsList(state: MainStateModel) {\n    return (userId: number) => {      \n      if (!userId) return state.posts;\n\n      return state.posts.filter(post => post.userId === userId)\n    };\n  }\n\n  constructor(private readonly external: ExternalApiService) {}\n\n  @Action(GetPosts)\n  public getPosts(ctx: StateContext<MainStateModel>) {\n    return this.external.getPosts()\n      .pipe(tap(posts => {\n        ctx.setState(state => ({ ...state, posts }))\n      }))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "external",
                        "type": "ExternalApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "external",
                        "type": "ExternalApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserState",
            "id": "injectable-UserState-34e1847afc09c4bb00f9298959ad889595d65a228a30119146f13b781972cceefa6d7d19cd874bf2d8df7bb948701576ee10282d0f3280e4561ed7ba344eef50",
            "file": "src/app/store/user/user.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getUserInfo",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<UserStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "GetUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetUser"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<UserStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "GetUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsersList",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<UserStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "GetUsers"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<UserStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userIds",
                    "args": [
                        {
                            "name": "state",
                            "type": "UserStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "UserStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entitie",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "EntityState"
                    }
                },
                {
                    "name": "entities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "inheritance": {
                        "file": "EntityState"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\n\nimport { tap } from 'rxjs';\n\nimport { GetUser, GetUsers } from './user.actions';\nimport { User } from '../../shared/utils/types/external-api.types';\nimport { ExternalApiService } from '../../shared/utils/services/external-api.service';\nimport { EntityState } from '../../shared/utils/classes/entity-base-state.class';\n\nexport interface UserStateModel {\n  entity: User | null;\n  entities: User[];\n}\n\nconst defaults: UserStateModel = {\n  entity: null,\n  entities: [],\n};\n\n@State<UserStateModel>({\n  name: 'user',\n  defaults\n})\n@Injectable()\nexport class UserState extends EntityState {\n  @Selector()\n  public static userIds(state: UserStateModel) {\n    return Array.from(new Set(state.entities.map(entity => entity.id)));\n  }\n\n  constructor(private readonly external: ExternalApiService) {\n    super();\n  }\n\n  @Action(GetUser)\n  public getUserInfo(ctx: StateContext<UserStateModel>, { userId }: GetUser) {\n    return this.external.getUserInfo(userId)\n      .pipe(tap(entity => {\n        ctx.setState(state => ({ ...state, entity }))\n      }))\n  }\n\n  @Action(GetUsers)\n  public getUsersList(ctx: StateContext<UserStateModel>) {\n    return this.external.getUsers()\n      .pipe(tap(entities => {\n        ctx.setState(state => ({ ...state, entities }))\n      }))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "external",
                        "type": "ExternalApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "external",
                        "type": "ExternalApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "EntityState"
            ],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "EntityState",
            "id": "class-EntityState-8dcae9fcc5ade475f52c22b1eb5da70e29fdb599c0fa65461805013263cd9b7099d12a30bc80797030674f2eb7c6c2ccf8db6a1f155fe03cb664e7c85eb7103b",
            "file": "src/app/shared/utils/classes/entity-base-state.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { createSelector } from '@ngxs/store';\n\nexport class EntityState {\n  static entitie<T>() {\n    return createSelector([this], (state: { entitie: T }) => {\n      return state.entitie;\n    });\n  }\n\n  static entities<T>() {\n    return createSelector([this], (state: { entities: T[] }) => {      \n      return state.entities;\n    });\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "entitie",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "entities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormGroupValidators",
            "id": "class-FormGroupValidators-4cb1a5dd8dd89ee6cea10e80fa2c428b9db2a3285f43d218e843600ff797fdbd143e6b12071ccef5dc59ef2b575c746df30537ef3b3918efdc42a2a581a365e0",
            "file": "src/app/shared/utils/validators/form-group.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ValidatorFn, AbstractControl, ValidationErrors, FormGroup } from \"@angular/forms\";\n\nexport class FormGroupValidators {\n    public static hasAtLeastOneField(fields: Array<string>): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            const formGroup = control as FormGroup;\n\n            if (!formGroup) return null;\n            \n            return fields.some((key) => formGroup.get(key)?.value)\n                ? null\n                : { hasAtLeastOneFieldError: true };\n        }\n    }\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "hasAtLeastOneField",
                    "args": [
                        {
                            "name": "fields",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormsAction",
            "id": "class-FormsAction-b003e52d0219d348bd52284c0bc4e358a761e5196405745be1b8c62afe60693ffef8a6dda8968b42a0d031873bb1b6af05c6a14735f7799769f565fdcb068743",
            "file": "src/app/forms/store/forms.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FormsAction {\n  static readonly type = '[Forms] Add item';\n  constructor(public payload: string) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Forms] Add item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetCountry",
            "id": "class-GetCountry-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Country List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPlaceOfRegistartion",
            "id": "class-GetPlaceOfRegistartion-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Place Of Registration List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPosts",
            "id": "class-GetPosts-13f0afdfacfce59c9ef7e8c3cb7ce331380300966d0872100b4cec6d5978e0dbf0cd26fe174e6e68168c3b577597154634094eec4b2ae87dd78335e244989edc",
            "file": "src/app/main/store/main.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetPosts {\n  static readonly type = '[Main] Get Posts';\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Main] Get Posts'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetUser",
            "id": "class-GetUser-c426c54b924c5fee5d04a8fa2449b1f00baca5c09ac91fce00e4269ecf189016ccbe3d25fa84bab4d5b1fde9376cc075e252de05cfdd92687e50f90ad860ce8f",
            "file": "src/app/store/user/user.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetUser {\n  static readonly type = '[User] Get User Info';\n  constructor(public userId?: number) {}\n}\n\n/**\n * вызов getUsersList()\n */\nexport class GetUsers {\n  static readonly type = '[User] Get Users List';\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "userId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[User] Get User Info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetUsers",
            "id": "class-GetUsers-c426c54b924c5fee5d04a8fa2449b1f00baca5c09ac91fce00e4269ecf189016ccbe3d25fa84bab4d5b1fde9376cc075e252de05cfdd92687e50f90ad860ce8f",
            "file": "src/app/store/user/user.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GetUser {\n  static readonly type = '[User] Get User Info';\n  constructor(public userId?: number) {}\n}\n\n/**\n * вызов getUsersList()\n */\nexport class GetUsers {\n  static readonly type = '[User] Get Users List';\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[User] Get Users List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "description": "<p>вызов getUsersList()</p>\n",
            "rawdescription": "\n\nвызов getUsersList()\n",
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetVehicleCategory",
            "id": "class-GetVehicleCategory-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Vehicle Category List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetVehicleDocType",
            "id": "class-GetVehicleDocType-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Vehicle Doc Type List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetVehicleMark",
            "id": "class-GetVehicleMark-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "category",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "category",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Vehicle Mark List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetVehicleModel",
            "id": "class-GetVehicleModel-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "VehicleModelsRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "VehicleModelsRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehicleModelsRequest",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Vehicle Model List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetVehiclePowerHorse",
            "id": "class-GetVehiclePowerHorse-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "VehiclePowerHorseRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "VehiclePowerHorseRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VehiclePowerHorseRequest",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Vehicle Power Horse List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetVehiclePurpose",
            "id": "class-GetVehiclePurpose-7083ae8688ad8de4507dcef94f4a0fad1b40eaf7bade8336e6540895fd881b5483973db995b4160092c2ae1d2a31a3c6361d5befecffdc796781ebd695b2ad99",
            "file": "src/app/store/dictionary/dictionary.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { VehicleModelsRequest, VehiclePowerHorseRequest } from \"./dictionary.types\";\n\nexport namespace Dictionary {\n  export class GetVehicleCategory {\n    static readonly type = '[Dictionary] Get Vehicle Category List';\n  }\n\n  export class GetPlaceOfRegistartion {\n    static readonly type = '[Dictionary] Get Place Of Registration List';\n  }\n\n  export class GetCountry {\n    static readonly type = '[Dictionary] Get Country List';\n  }\n\n  export class GetVehiclePurpose {\n    static readonly type = '[Dictionary] Get Vehicle Purpose List';\n  }\n\n  export class GetVehicleDocType {\n    static readonly type = '[Dictionary] Get Vehicle Doc Type List';\n  }\n\n  export class GetVehicleMark {\n    static readonly type = '[Dictionary] Get Vehicle Mark List';\n    constructor(public category: string) {};\n  }\n\n  export class GetVehicleModel {\n    static readonly type = '[Dictionary] Get Vehicle Model List';\n    constructor(public payload: VehicleModelsRequest) {};\n  }\n\n  export class GetVehiclePowerHorse {\n    static readonly type = '[Dictionary] Get Vehicle Power Horse List';\n    constructor(public payload: VehiclePowerHorseRequest) {};\n  }\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Dictionary] Get Vehicle Purpose List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        126,
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CustomControlBase",
            "id": "directive-CustomControlBase-cef1d609fd67778bbd042331a75841ec883a3f6456b91977b050d5229f088605db95a31ad49c4d11a83f5e57149895e7486697423d24d88240bd4948673c3d87",
            "file": "src/app/shared/utils/classes/custom-control-base.class.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnDestroy } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\n\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { FormComponentBase } from './form-component-base.class';\n\n@Directive()\nexport abstract class CustomControlBase<T> extends FormComponentBase implements ControlValueAccessor, Validator, OnDestroy {\n\n  private readonly _unsubscribe$ = new Subject<void>();\n\n  public writeValue(value: T): void {\n    value && this.form.setValue(value, { emitEvent: false });\n  }\n\n  public onTouched: (_: T) => void = () => {};\n\n  public registerOnChange(onChange: (_: T) => void): void {\n    this.form.valueChanges\n      .pipe(takeUntil(this._unsubscribe$))\n      .subscribe(onChange);\n  }\n\n  public registerOnTouched(fn: (_: T) => void): void {    \n    this.onTouched = fn;\n  }\n\n  public validate(_: AbstractControl): ValidationErrors | null {\n    return this.form.invalid ? { invalid: true } : null;\n  }\n\n  public ngOnDestroy(): void {\n    this._unsubscribe$.next();\n    this._unsubscribe$.complete();    \n  }\n}\n",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        125,
                        128
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flush",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                }
            ],
            "extends": [
                "FormComponentBase"
            ],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnDestroy"
            ]
        },
        {
            "name": "FirstCapitalLetterDirective",
            "id": "directive-FirstCapitalLetterDirective-a312bc2ef9c11061121b57921a1d2b65ba296b58b0c4871eefa99964eae99556778ca12970cd4208bf6225d2c0b319979f4ff913ab140e1c0d0f67f8e8a61849",
            "file": "src/app/shared/utils/directives/first-capital-letter.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: '[firstCapitalLetter]',\n  standalone: true,\n})\nexport class FirstCapitalLetterDirective {\n  constructor(public ref: ElementRef, private readonly control: NgControl) {}\n\n  @HostListener('input', ['$event'])\n  transformToUppercase(): void {\n    const inputEl = this.ref.nativeElement.value;\n    this.control.control?.setValue(\n      inputEl.substring(0, 1).toUpperCase() + inputEl.substring(1).toLowerCase()\n    );\n  }\n}\n",
            "selector": "[firstCapitalLetter]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "transformToUppercase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormComponentBase",
            "id": "directive-FormComponentBase-43bbc2ad34333eca97b11931ef09fa415c82bc89f1d705dcb02dbd87fbe796aebc821a031b148066793393a20bbe689fca16a7678b9b39891a12c7d29b4c790e",
            "file": "src/app/shared/utils/classes/form-component-base.class.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Directive()\nexport abstract class FormComponentBase {\n    public abstract form: FormGroup;\n\n    public flush(controlName: string): void {\n        this.form.get(controlName)?.reset(null);\n    }\n}",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        125,
                        128
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "flush",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "ToUppercaseDirective",
            "id": "directive-ToUppercaseDirective-6fac9fe2fd54469e7b843dad52e240255b4eb9d89310489a6cc4aa239fd372f58f863f69a61031dfb649f52cd202fba74ab0b381562e9e725c8be290a9ccb729",
            "file": "src/app/shared/utils/directives/to-uppercase.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[toUppercase]',\n  standalone: true,\n})\nexport class ToUppercaseDirective {\n  constructor(public ref: ElementRef, private readonly renderer: Renderer2) {}\n\n  @HostListener('input', ['$event'])\n  transformToUppercase(): void {    \n    const inputValue = this.ref.nativeElement.value;\n    this.renderer.setProperty(this.ref.nativeElement, 'value', inputValue.toUpperCase());\n  }\n}\n",
            "selector": "[toUppercase]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                }
            ],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "transformToUppercase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-224a9ccc267aaa5eef999c2628264b76b513e818d6e625b1444997266144c00038c49c4f466dd97fbcc664de8b430338ddfe108fea89e50eee0297aad1b9569b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'flux-arch'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "layout"
                },
                {
                    "name": "tui"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\nimport { TuiMobileCalendarDialogModule } from '@taiga-ui/addon-mobile';\nimport { TuiRootModule, TuiDialogModule } from '@taiga-ui/core';\n\nimport { HeaderComponent, SidenavComponent } from '@shared/layout';\nimport { TuiDocMainModule } from '@taiga-ui/addon-doc';\n\nconst layout = [\n  HeaderComponent,\n  SidenavComponent,\n]\n\nconst tui = [\n  TuiRootModule,\n  TuiDialogModule,\n  TuiDocMainModule,\n  TuiMobileCalendarDialogModule,\n]\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    layout,\n    tui,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'flux-arch';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<tui-root>\n    <app-header></app-header>\n    \n    <app-sidenav>\n        <main mainContent class=\"main__content\">\n            <router-outlet></router-outlet>\n        </main>\n    </app-sidenav>\n\n    <ng-container ngProjectAs=\"tuiOverContent\">\n        <ng-content select=\"tuiOverContent\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverDialogs\">\n        <ng-content select=\"tuiOverDialogs\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverAlerts\">\n        <ng-content select=\"tuiOverAlerts\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverPortals\">\n        <ng-content select=\"tuiOverPortals\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"tuiOverHints\">\n        <ng-content select=\"tuiOverHints\"></ng-content>\n    </ng-container>\n</tui-root>\n\n\n\n"
        },
        {
            "name": "ArrayComponent",
            "id": "component-ArrayComponent-32242555f32e0467187329f8106a76fff1df38ffe621f52753d0057be44e12b6fae82a3dfa64a88b3cadde06b90b9a074eb4fde2f73d4ff73552cb0547105b60",
            "file": "src/app/forms/ui/array/array.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-array",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./array.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-array',\n  standalone: true,\n  imports: [],\n  templateUrl: './array.component.html',\n  styleUrl: './array.component.scss'\n})\nexport class ArrayComponent {\n\n}\n",
            "styleUrl": "./array.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>array works!</p>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "FormsComponent",
            "id": "component-FormsComponent-c8b4ef5dd6c52f4c412d28e5d271abd68bef414e044a750018590e44819a7541ca364b7c19f3cc87442cb7f6854dbdabeb2b195e29fa2ebed1e61acb9f8780ea",
            "file": "src/app/forms/forms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: DICT_LIST, useValue: [\n        DICTIONARY.COUNTRY, DICTIONARY.PLACE_OF_REGISTRACTION, DICTIONARY.VEHICLE_CATEGORY, DICTIONARY.VEHICLE_DOC_TYPE, DICTIONARY.VEHICLE_PURPOSE,\n    ],\n}",
                    "ns": "{\n    provide: DICT_LIST, useValue: [\n        DICTIONARY"
                },
                {
                    "name": "dictInitializingProvider()"
                }
            ],
            "selector": "app-forms",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./forms.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "FOREIGN_COUNTRY_KEY",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "isFormValid$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "FormsState.isFormValid"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "material"
                },
                {
                    "name": "components",
                    "type": "component"
                },
                {
                    "name": "core"
                },
                {
                    "name": "tui"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe } from '@angular/common';\nimport { Component, Inject, importProvidersFrom } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { Select } from '@ngxs/store';\n\nimport { dictInitializingProvider } from '@shared/providers';\nimport { DICT_INITIALIZE, DICT_LIST } from '@shared/tokens';\nimport { DICTIONARY } from '@shared/consts';\n\nimport { ArrayComponent, GroupComponent, NestedComponent } from './ui';\nimport { FormsState } from './store/forms.state';\nimport { TuiAddonDocModule, TuiDocExample } from '@taiga-ui/addon-doc';\n\nconst material = [\n  MatTabsModule,\n  MatButtonModule,\n  MatCardModule,\n];\n\nconst components = [\n  GroupComponent,\n  NestedComponent,\n  ArrayComponent,\n];\n\nconst core = [\n  FormsModule,\n  ReactiveFormsModule,\n  AsyncPipe,\n]\n\nconst tui = [\n  TuiAddonDocModule,\n]\n\n@Component({\n  selector: 'app-forms',\n  standalone: true,\n  imports: [\n    material,\n    components,\n    core,\n    tui,\n  ],\n  providers: [\n    {\n      provide: DICT_LIST,\n      useValue: [\n        DICTIONARY.COUNTRY,\n        DICTIONARY.PLACE_OF_REGISTRACTION,\n        DICTIONARY.VEHICLE_CATEGORY,\n        DICTIONARY.VEHICLE_DOC_TYPE,\n        DICTIONARY.VEHICLE_PURPOSE,\n      ],\n    },\n    dictInitializingProvider(),\n  ],\n  templateUrl: './forms.component.html',\n  styleUrl: './forms.component.scss'\n})\nexport class FormsComponent {\n\n  @Select(FormsState.isFormValid)\n  public isFormValid$!: Observable<(step: number) => boolean>;\n  \n  public readonly FOREIGN_COUNTRY_KEY = 3;\n\n  public selectedIndex: number = 0;\n\n  constructor(@Inject(DICT_INITIALIZE) readonly dictInit$: Observable<boolean>) {}\n}\n",
            "styleUrl": "./forms.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dictInit$",
                        "type": "Observable<boolean>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "dictInit$",
                        "type": "Observable<boolean>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if(isFormValid$ | async; as isFormValid) {\n    <mat-card class=\"card\">\n        <mat-tab-group>\n            <mat-tab label=\"Form Group\">\n                <app-group></app-group>\n            </mat-tab>\n\n            <mat-tab label=\"Nested Form\">\n                <app-nested></app-nested>\n            </mat-tab>\n\n            <mat-tab label=\"Form Array\">\n                <app-array></app-array>\n            </mat-tab>\n        </mat-tab-group>\n    </mat-card>\n}"
        },
        {
            "name": "FullNameComponent",
            "id": "component-FullNameComponent-a86bda8eebb65f55e79fc6ebebe572d2e17ffb3da3c0bc7a8bc1c1a7a9bc7ce80da4fe31e1cb07b4530d45444302acc3014eab426761d778ba51801ae6acdebd",
            "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FullNameComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FullNameComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "full-name",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./full-name.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<FormType<FullNameModel>>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        125,
                        164
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                },
                {
                    "name": "_unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CustomControlBase"
                    }
                },
                {
                    "name": "flush",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "material"
                },
                {
                    "name": "utils"
                },
                {
                    "name": "core"
                },
                {
                    "name": "components",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, forwardRef } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { CustomControlBase } from '@shared/classes';\nimport { InputDateComponent } from '@shared/components';\nimport { FirstCapitalLetterDirective } from '@shared/directives';\n\nimport { FullNameModel } from './utils';\n\nconst material = [\n  MatFormFieldModule,\n  MatInputModule,\n  MatButtonModule,\n  MatIconModule,\n]\n\nconst components = [\n  InputDateComponent,\n]\n\nconst utils = [\n  FirstCapitalLetterDirective,\n]\n\nconst core = [\n  FormsModule,\n  ReactiveFormsModule,\n]\n\n@Component({\n  selector: 'full-name',\n  standalone: true,\n  imports: [\n    material,\n    utils,\n    core,\n    components,\n  ],\n  templateUrl: './full-name.component.html',\n  styleUrl: './full-name.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FullNameComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => FullNameComponent),\n      multi: true,\n    },\n  ]\n})\nexport class FullNameComponent extends CustomControlBase<FullNameModel> implements OnInit  {\n  public override form: FormGroup<FormType<FullNameModel>>;\n\n  constructor(\n    private readonly fb: FormBuilder,\n  ) {\n    super();\n\n    this.form = this.fb.group({\n      lastName: this.fb.control<string | null>(null, [Validators.required]),\n      firstName: this.fb.control<string | null>(null, [Validators.required]),\n      middleName: this.fb.control<string | null>(null),\n    })\n  }\n\n  public ngOnInit(): void {}\n}\n",
            "styleUrl": "./full-name.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "CustomControlBase"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\">\n    <div class=\"row\">\n        <mat-form-field class=\"col\" appearance=\"outline\">\n            <mat-label>Фамилия</mat-label>\n            <input \n                matInput \n                type=\"text\" \n                formControlName=\"lastName\"\n                firstCapitalLetter\n            />\n            @if (form.get('lastName')?.value) {\n                <button matSuffix mat-icon-button (click)=\"flush('lastName')\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            }\n        </mat-form-field>\n    \n        <mat-form-field class=\"col\" appearance=\"outline\">\n            <mat-label>Имя</mat-label>\n            <input \n                matInput \n                type=\"text\" \n                formControlName=\"firstName\"\n                firstCapitalLetter\n            />\n            @if (form.get('firstName')?.value) {\n                <button matSuffix mat-icon-button (click)=\"flush('firstName')\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            }\n        </mat-form-field>\n    \n        <mat-form-field class=\"col\" appearance=\"outline\">\n            <mat-label>Отчество</mat-label>\n            <input \n                matInput \n                type=\"text\" \n                formControlName=\"middleName\"\n                firstCapitalLetter\n            />\n            @if (form.get('middleName')?.value) {\n                <button matSuffix mat-icon-button (click)=\"flush('middleName')\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            }\n        </mat-form-field>\n    </div>\n</form>"
        },
        {
            "name": "GroupComponent",
            "id": "component-GroupComponent-dcc7d60ccaaeda4f315d17b6e4c676c2ad2538e03756bdb88c8cf603c24dc8f6bb88a61b26ec667206f11833538aed5ccc9090eabe43c31a550ee2aded360209",
            "file": "src/app/forms/ui/group/group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNativeDateAdapter()"
                },
                {
                    "name": "provideNgxMask({ validation: true })"
                }
            ],
            "selector": "app-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./group.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customPatterns",
                    "defaultValue": "customPatterns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "filteredCountryList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<CountryDictContent>>",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "DictionaryState.filteredCountryList"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                },
                {
                    "name": "maxYear",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "minYear",
                    "defaultValue": "new Date(1900, 0, 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "vehicleCategoryList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<string>>",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": " => dictionary.vehicleCategory"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displayWith",
                    "args": [
                        {
                            "name": "option",
                            "type": "CountryDictContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "CountryDictContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "flush",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "core"
                },
                {
                    "name": "material"
                },
                {
                    "name": "components",
                    "type": "component"
                },
                {
                    "name": "libs"
                },
                {
                    "name": "utils"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, JsonPipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { provideNativeDateAdapter } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { NgxsFormPluginModule } from '@ngxs/form-plugin';\nimport { Select } from '@ngxs/store';\n\nimport { NgxMaskDirective, provideNgxMask } from 'ngx-mask';\n\nimport { FormComponentBase } from '@shared/classes';\nimport { InputYearComponent } from '@shared/components';\nimport { ToUppercaseDirective } from '@shared/directives';\nimport { customPatterns } from '@shared/patterns';\nimport { CountryDictContent } from '@shared/types';\n\nimport { DictionaryState, DictionaryStateModel } from '@store/dictionary/dictionary.state';\nimport { TuiAddonDocModule } from '@taiga-ui/addon-doc';\n\nconst core = [\n  FormsModule, \n  ReactiveFormsModule,\n  AsyncPipe,\n  JsonPipe,\n];\n\nconst material = [\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatAutocompleteModule,\n  MatIconModule,\n  MatButtonModule,\n];\n\nconst components = [\n  InputYearComponent,\n];\n\nconst libs = [\n  NgxMaskDirective,\n  NgxsFormPluginModule,\n];\n\nconst utils = [\n  ToUppercaseDirective,\n]\n\nconst tui = [\n  TuiAddonDocModule,\n]\n\n@Component({\n  selector: 'app-group',\n  standalone: true,\n  imports: [\n    core,\n    material,\n    components,\n    libs,\n    utils,\n    // tui,\n  ],\n  templateUrl: './group.component.html',\n  styleUrl: './group.component.scss',\n  providers: [\n    provideNativeDateAdapter(),\n    provideNgxMask({ validation: true }),\n  ]\n})\nexport class GroupComponent extends FormComponentBase implements OnInit {\n  @Select(DictionaryState.filteredCountryList) \n  public filteredCountryList$!: Observable<Array<CountryDictContent>>;\n\n  @Select(({ dictionary }: { dictionary: DictionaryStateModel }) => dictionary.vehicleCategory)\n  public vehicleCategoryList$!: Observable<Array<string>>;\n\n  public readonly customPatterns = customPatterns;\n\n  public readonly minYear = new Date(1900, 0, 1);\n  public readonly maxYear = new Date();\n\n  public form: FormGroup;\n\n  constructor(\n    private readonly fb: FormBuilder,\n  ) {\n    super();\n\n    this.form = this.fb.group({\n      testAutocomplete: [null, { validators: [Validators.required], updateOn: 'change' }],\n      testSelect: [null, [Validators.required]],\n      testMaskedInput: [null],\n      testInputYear: [null, [Validators.required]],\n    }, \n    { \n      // стейт будет обновляться только после события blur у контрола\n      updateOn: 'submit',\n    });\n  }\n\n  public ngOnInit(): void {}\n\n  public displayWith(option: CountryDictContent): string {\n    return option && (option.name ?? '');\n  }\n\n  public onSubmit(): void {\n    console.log('SUBMIT');\n  }\n}\n",
            "styleUrl": "./group.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "FormComponentBase"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<!-- ngxsFormDebounce - при положительных значениях стейт обновляется асинхронно (дефолт - 100 мс) -->\n<!-- ngxsFormDebounce - при значении -1 - синхронно -->\n\n<!-- [ngxsFormClearOnDestroy]=\"true\" -->\n<form \n    [formGroup]=\"form\" \n    ngxsForm=\"forms.groupForm\"\n    class=\"form-block\"\n    (submit)=\"onSubmit()\"\n>\n    <section class=\"section\">\n        <div class=\"row\">\n            <mat-form-field class=\"col\" appearance=\"outline\">\n                <mat-label>Автозаполнение</mat-label>\n                <input\n                    type=\"text\"\n                    matInput\n                    formControlName=\"testAutocomplete\"\n                    [matAutocomplete]=\"countryList\"\n                />\n                <mat-autocomplete #countryList=\"matAutocomplete\" [displayWith]=\"displayWith\">\n                    @for (country of filteredCountryList$ | async; track country) {\n                        <mat-option [value]=\"country\">{{ country.name }}</mat-option>\n                    }\n                </mat-autocomplete>\n            </mat-form-field>\n\n            <mat-form-field class=\"col\" appearance=\"outline\">\n                <mat-label>Выпадающий список</mat-label>\n                <mat-select formControlName=\"testSelect\">\n                    @for (vehicleCategory of vehicleCategoryList$ | async; track $index) {\n                        <mat-option [value]=\"vehicleCategory\">{{ vehicleCategory }}</mat-option>\n                    }\n                </mat-select>\n                @if(form.get('testSelect')?.hasError('required')) {\n                    <mat-error>Обязательное поле</mat-error>\n                }\n            </mat-form-field>\n        </div>\n\n        <div class=\"row\">\n            <mat-form-field class=\"col\" appearance=\"outline\">\n                <mat-label>Поле ввода</mat-label>\n                <input \n                    matInput \n                    type=\"text\" \n                    formControlName=\"testMaskedInput\"\n                    mask=\"W 000 WW 00||W 000 WW 000\"\n                    [specialCharacters]=\"[' ']\"\n                    [dropSpecialCharacters]=\"true\"\n                    [patterns]=\"customPatterns\"\n                    toUppercase\n                />\n                @if (form.get('testMaskedInput')?.value) {\n                    <button matSuffix mat-icon-button (click)=\"flush('testMaskedInput')\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                }\n                @if (form.get('testMaskedInput')?.hasError('mask')) {\n                    <mat-error>Неккоректное значение</mat-error>\n                }\n            </mat-form-field>\n\n            <input-year\n                class=\"col\"\n                formControlName=\"testInputYear\"\n                label=\"Выбор года\"\n                [min]=\"minYear\"\n                [max]=\"maxYear\">\n            </input-year>\n        </div>\n    </section>\n\n    <div class=\"form__actions\">\n        <button \n            mat-flat-button \n            color=\"accent\" \n            type=\"submit\">\n            Сохранить\n        </button>\n    </div>\n</form>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2ac13c6a11017cd6281e30f7ebab4de6f708d1eeb532c8b7b1663004e02427cfd830c338f775d939a3facbe62e30255b71373dc69bbfceeec61144e48bab7244-1",
            "file": "src/app/shared/ui/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unscubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "selectedUser",
                    "defaultValue": "new FormControl<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "usersList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User[]>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "compareFn",
                    "args": [
                        {
                            "name": "object1",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "object2",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "object1",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "object2",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "material"
                },
                {
                    "name": "core"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AsyncPipe, JsonPipe } from '@angular/common';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { Observable, Subject, filter, takeUntil } from 'rxjs';\n\nimport { Select, Store } from '@ngxs/store';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { UserState } from '../../../../store/user/user.state';\nimport { User } from '../../../utils/types/external-api.types';\nimport { GetUser, GetUsers } from '../../../../store/user/user.actions';\n\nconst core = [\n  AsyncPipe,\n  FormsModule,\n  ReactiveFormsModule,\n  JsonPipe,\n]\n\nconst material = [\n  MatIconModule,\n  MatFormFieldModule,\n  MatSelectModule,\n]\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [\n    material,\n    core,\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss'\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  @Select(UserState.entities<User>())\n  public usersList$!: Observable<User[]>;\n\n  public readonly selectedUser = new FormControl<User | null>(null);\n\n  private readonly _unscubscribe$ = new Subject<void>();\n\n  constructor(private readonly store: Store) {\n    // ATTENTION!\n    // берем снимок состояния\n    // так как получение юзера проходит при инициализации апы, то 100% юезр к этому моменту будет\n    this.selectedUser.setValue(this.store.selectSnapshot(state => state.user.entity));\n    this.store.dispatch(new GetUsers());\n  }\n\n  public ngOnInit(): void {\n    this.selectedUser.valueChanges\n      .pipe(takeUntil(this._unscubscribe$))\n      .pipe(filter(user => !!user))\n      .subscribe(user => this.store.dispatch(new GetUser(user?.id)));\n  }\n\n  public compareFn(object1: User, object2: User): boolean {\n    return object1 && object2 && object1.id === object2.id;\n  }\n\n  public ngOnDestroy(): void {\n    this._unscubscribe$.next();\n    this._unscubscribe$.complete();\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header class=\"header\">\n    <div class=\"header__container\">\n        <div class=\"header__party party\">\n            <h1 class=\"party__name\">NGXS</h1>\n        </div>\n\n        <div class=\"header__user\">\n            <mat-form-field appearance=\"outline\" class=\"user__select\">\n                <mat-select [formControl]=\"selectedUser\" [compareWith]=\"compareFn\">\n                    @for (user of usersList$ | async; track user) {\n                        <mat-option [value]=\"user\">{{ user.name }}</mat-option>\n                    }\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n</header>"
        },
        {
            "name": "InputAddressComponent",
            "id": "component-InputAddressComponent-a26e3511bbb897ff04e25fe249ea9ec98c4bc8f752be42b9c51e23bfe7c58d62e306c8c8f37e4453f09256b4f86f80264d5c264d671db4a615ac072a4532f188",
            "file": "src/app/shared/ui/components/input-address/input-address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputAddressComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => InputAddressComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "input-address",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-address.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Адрес'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "returnObjectAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_isLoading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_returnObjectAddress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_suggestions$",
                    "defaultValue": "new BehaviorSubject<Array<DaDataAddress>>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl<string | null | DaDataAddress>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_load",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "suggestions",
                            "type": "DaDataAddress",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "suggestions",
                            "type": "DaDataAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "string | null | DaDataAddress",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "string | null | DaDataAddress",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "address",
                            "type": "string | null | DaDataAddress",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string | null | DaDataAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "core"
                },
                {
                    "name": "material"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormsModule,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\n\nimport { BehaviorSubject, Subject, debounceTime, filter, finalize, map, takeUntil } from 'rxjs';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { DaDataAddress } from '../../../utils/types/dadata.types';\nimport { DadataService } from '../../../utils/services/dadata.service';\nimport { distinctUntilObjectChanged } from '../../../utils/pipes/distinct-until-object-changed.pipe';\n\nconst core = [FormsModule, ReactiveFormsModule];\n\nconst material = [MatFormFieldModule, MatInputModule, MatAutocompleteModule];\n\n@Component({\n  selector: 'input-address',\n  standalone: true,\n  imports: [core, material],\n  templateUrl: './input-address.component.html',\n  styleUrl: './input-address.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputAddressComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => InputAddressComponent),\n      multi: true,\n    },\n  ],\n})\nexport class InputAddressComponent implements OnInit, ControlValueAccessor, Validator, OnDestroy {\n  @Input('label')\n  public label = 'Адрес';\n\n  private _returnObjectAddress: boolean = false;\n  @Input('returnObjectAddress')\n  public set returnObjectAddress(value: boolean | string) {\n    this._returnObjectAddress = typeof value === 'boolean' ? value : true;\n  }\n\n  private readonly _isLoading$ = new BehaviorSubject<boolean>(false);\n  public get isLoading(): boolean {\n    return this._isLoading$.getValue();\n  }\n  public set isLoading(isLoading: boolean) {\n    this._isLoading$.next(isLoading);\n  }\n\n  private readonly _suggestions$ = new BehaviorSubject<Array<DaDataAddress>>([]);\n  public get suggestions(): Array<DaDataAddress> {\n    return this._suggestions$.getValue();\n  }\n  public set suggestions(suggestions: Array<DaDataAddress>) {\n    this._suggestions$.next(suggestions);\n  }\n\n  public readonly control = new FormControl<string | null | DaDataAddress>(null);\n\n  private readonly _unsubscribe$ = new Subject<void>();\n\n  constructor(private readonly dadata: DadataService) {}\n\n  public ngOnInit(): void {\n    this.control.valueChanges\n      .pipe(takeUntil(this._unsubscribe$))\n      .pipe(debounceTime(500))\n      .pipe(filter((query) => typeof query === 'string'))\n      .pipe(map(query => query as string))\n      .subscribe((query: string) => this._load(query));\n\n    this.control.valueChanges\n      .pipe(takeUntil(this._unsubscribe$))\n      .pipe(distinctUntilObjectChanged())\n      .pipe(debounceTime(500))\n      .pipe(filter((query) => !!query && typeof query === 'object'))\n      .pipe(map(query => query as DaDataAddress))\n      .subscribe((query: DaDataAddress) => this._load(query.value));\n  }\n\n  public onChange: (_: string | null | DaDataAddress) => void = (_: string | null | DaDataAddress) => {};\n\n  public onTouched: () => void = () => {};\n\n  public writeValue(address: string | null | DaDataAddress): void {\n    if (address && typeof address === 'object')\n      this.control.setValue(address.value);\n    if (address && typeof address === 'string') this.control.setValue(address);\n\n    this.control.markAsUntouched();\n  }\n\n  public registerOnChange(fn: (_: string | null | DaDataAddress) => void): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  public validate(_: AbstractControl): ValidationErrors | null {\n    return this.control.errors && this.control.touched\n      ? { invalid: true }\n      : null;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.control.disable() : this.control.enable();\n    this.control.updateValueAndValidity();\n  }\n\n  public displayFn(suggestions: DaDataAddress): string {\n    return suggestions && (suggestions.value ?? this.control.value);\n  }\n\n  private _load(query: string): void {\n    this.isLoading = true;\n\n    this.dadata\n      .getAddress(query)\n      .pipe(finalize(() => (this.isLoading = false)))\n      .subscribe({\n        next: (suggestions) => {\n          this.suggestions = suggestions;\n\n          const match = suggestions.find((suggestion) => suggestion.value === query);\n\n          if (match) {\n            this.control.setValue(match);\n            this._returnObjectAddress\n              ? this.onChange(match)\n              : this.onChange(match.value);\n            this.control.markAsTouched();\n          } else {\n            this.control.setErrors({ notFound: true });\n            this.control.markAsTouched();\n            this.onChange(query);\n          }\n        },\n        error: (_) => {\n          this.suggestions = [];\n        },\n      });\n  }\n\n  public ngOnDestroy(): void {\n    this._unsubscribe$.next();\n    this._unsubscribe$.complete();\n  }\n}\n",
            "styleUrl": "./input-address.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dadata",
                        "type": "DadataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "dadata",
                        "type": "DadataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "Validator",
                "OnDestroy"
            ],
            "accessors": {
                "returnObjectAddress": {
                    "name": "returnObjectAddress",
                    "setSignature": {
                        "name": "returnObjectAddress",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isLoading": {
                    "name": "isLoading",
                    "setSignature": {
                        "name": "isLoading",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "isLoading",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "isLoading",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isLoading",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58
                    }
                },
                "suggestions": {
                    "name": "suggestions",
                    "setSignature": {
                        "name": "suggestions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "suggestions",
                                "type": "Array<DaDataAddress>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "suggestions",
                                "type": "Array<DaDataAddress>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "suggestions",
                        "type": "",
                        "returnType": "Array<DaDataAddress>",
                        "line": 66
                    }
                }
            },
            "templateData": "<mat-form-field style=\"width: 100%\">\n    <mat-label>{{ label }}</mat-label>\n    <input type=\"text\" matInput [formControl]=\"control\" [matAutocomplete]=\"auto\">\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn.bind(this)\">\n        @for (suggestion of suggestions; track suggestion) {\n            <mat-option [value]=\"suggestion\">\n                {{ suggestion.value }}\n            </mat-option>\n        }\n    </mat-autocomplete>\n    @if (isLoading) {\n        <label class=\"spinner\">\n            <div class=\"loading\"></div>\n        </label>\n    }\n</mat-form-field>"
        },
        {
            "name": "InputDateComponent",
            "id": "component-InputDateComponent-b9f647fc036f95cda585de088020226370e99654302406a2e76d8365eddb5ded4ea7cc50a6e78801b263b9842665f65dbc93bf1ae400c7e99d570c288799804a",
            "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputDateComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => InputDateComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "provideNativeDateAdapter()"
                }
            ],
            "selector": "input-date",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-date.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Год'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'ДД.ММ.ГГГГ'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl<Date | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "maskitoOptions",
                    "defaultValue": "maskitoDateOptionsGenerator({mode: 'dd/mm/yyyy', separator: '.'})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MaskitoOptions",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "chosenYearHandler",
                    "args": [
                        {
                            "name": "chosenYear",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chosenYear",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "core"
                },
                {
                    "name": "material"
                },
                {
                    "name": "tui"
                },
                {
                    "name": "maskito"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl, FormsModule, ReactiveFormsModule, NG_VALIDATORS, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\n\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { provideNativeDateAdapter } from '@angular/material/core';\n\nimport { TuiInputDateModule } from '@taiga-ui/kit';\n\nimport { MaskitoOptions } from '@maskito/core';\nimport { MaskitoDirective } from '@maskito/angular';\nimport { maskitoDateOptionsGenerator } from '@maskito/kit';\n\nconst core = [\n  FormsModule,\n  ReactiveFormsModule,\n]\n\nconst material = [\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatInputModule,\n]\n\nconst tui = [\n  TuiInputDateModule,\n]\n\nconst maskito = [\n  MaskitoDirective,\n]\n\n@Component({\n  selector: 'input-date',\n  standalone: true,\n  imports: [\n    core,\n    material,\n    tui,\n    maskito,\n  ],\n  templateUrl: './input-date.component.html',\n  styleUrl: './input-date.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputDateComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => InputDateComponent),\n      multi: true,\n    },\n    provideNativeDateAdapter(),\n  ]\n})\nexport class InputDateComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  @Input('label')\n  public label: string = 'Год';\n\n  @Input('placeholder')\n  public placeholder: string = 'ДД.ММ.ГГГГ';\n\n  @Input('min')\n  public minDate?: Date;\n\n  @Input('max')\n  public maxDate?: Date;\n\n  public readonly maskitoOptions: MaskitoOptions = maskitoDateOptionsGenerator({mode: 'dd/mm/yyyy', separator: '.'});\n\n  public readonly control = new FormControl<Date | null>(null);\n\n  private readonly _unsubscribe$ = new Subject<void>();\n\n  constructor() {}\n\n  // TODO\n  // добавить маску типа дд.мм.гггг\n\n  public ngOnInit(): void {}\n\n  public onTouched: (_: Date | null) => void = () => {};\n\n  public writeValue(value: Date | null): void {\n    value && this.control.setValue(value);\n  }\n\n  public registerOnChange(onChange: (_: Date | null) => void): void {\n    this.control.valueChanges\n      .pipe(takeUntil(this._unsubscribe$))\n      .subscribe(onChange);\n  }\n\n  public registerOnTouched(fn: (_: Date | null) => void): void {\n    this.onTouched = fn;\n  }\n\n  public validate(_: AbstractControl): ValidationErrors | null {\n    return this.control.invalid ? { invalid: true } : null;\n  }\n\n  public chosenYearHandler(chosenYear: Date, datepicker: MatDatepicker<Date>) {\n    this.control.setValue(chosenYear);\n    datepicker.close();\n  }\n\n  public ngOnDestroy(): void {\n    this._unsubscribe$.next();\n    this._unsubscribe$.complete();\n  }\n}\n",
            "styleUrl": "./input-date.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 78
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wrapper\">\n    <h2>Material</h2>\n\n    <mat-form-field>\n        <mat-label>{{ label }}</mat-label>\n        <input\n            matInput\n            [matDatepicker]=\"datePicker\"\n            [formControl]=\"control\"\n            [placeholder]=\"placeholder\"\n            [min]=\"minDate\"\n            [max]=\"maxDate\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"datePicker\"></mat-datepicker-toggle>\n        <mat-datepicker #datePicker></mat-datepicker>\n    </mat-form-field>\n</div>\n\n<div class=\"wrapper\">\n    <h2>Taiga</h2>\n\n    <tui-input-date [formControl]=\"control\">\n        {{ label }}\n        <input tuiTextfield />\n    </tui-input-date>\n</div>\n\n<div class=\"wrapper\">\n    <h2>Material + Maskito</h2>\n\n    <mat-form-field>\n        <mat-label>{{ label }}</mat-label>\n        <input\n            matInput\n            [matDatepicker]=\"datePicker\"\n            [formControl]=\"control\"\n            [placeholder]=\"placeholder\"\n            [min]=\"minDate\"\n            [max]=\"maxDate\"\n            [maskito]=\"maskitoOptions\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"datePicker\"></mat-datepicker-toggle>\n        <mat-datepicker #datePicker></mat-datepicker>\n    </mat-form-field>\n</div>"
        },
        {
            "name": "InputYearComponent",
            "id": "component-InputYearComponent-3cda66dcf008e1e7e800be55f8499eb6385d8f4e40797467ce874315f5f86502e6498292097cc3a0b8849a3f36d3a40b8fceaecde3b855530629a3b42693f749",
            "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputYearComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => InputYearComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n}"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }"
                }
            ],
            "selector": "input-year",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-year.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Год'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'ГГГГ'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl<Date | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "chosenYearHandler",
                    "args": [
                        {
                            "name": "chosenYear",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chosenYear",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "Date | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "external",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "external",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "material"
                },
                {
                    "name": "core"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, FormControl, FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, ReactiveFormsModule, ValidationErrors, Validator } from '@angular/forms';\n\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS } from '@angular/material-moment-adapter';\n\nconst core = [\n  FormsModule,\n  ReactiveFormsModule,\n]\n\nconst material = [\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatInputModule,\n]\n\nexport const MY_FORMATS = {\n  parse: {\n    dateInput: 'YYYY',\n  },\n  display: {\n    dateInput: 'YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@Component({\n  selector: 'input-year',\n  standalone: true,\n  imports: [\n    material,\n    core,\n  ],\n  templateUrl: './input-year.component.html',\n  styleUrl: './input-year.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputYearComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => InputYearComponent),\n      multi: true,\n    },\n    {\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n      deps: [ MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS ],\n    },\n    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },\n  ]\n})\nexport class InputYearComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  @Input('label')\n  public label: string = 'Год';\n\n  @Input('placeholder')\n  public placeholder: string = 'ГГГГ';\n\n  @Input('min')\n  public minYear?: Date;\n\n  @Input('max')\n  public maxYear?: Date;\n\n  public readonly control = new FormControl<Date | null>(null);\n\n  private readonly _unsubscribe$ = new Subject<void>();\n\n  constructor() {}\n\n  public ngOnInit(): void {}\n\n  public onTouched: (_: Date | null) => void = () => {};\n\n  public writeValue(value: Date | null): void {\n    value && this.control.setValue(value);\n  }\n\n  public registerOnChange(onChange: (_: Date | null) => void): void {\n    this.control.valueChanges\n      .pipe(takeUntil(this._unsubscribe$))\n      .subscribe(onChange);\n  }\n\n  public registerOnTouched(fn: (_: Date | null) => void): void {\n    this.onTouched = fn;\n  }\n\n  public validate(external: AbstractControl): ValidationErrors | null {    \n    return this.control.invalid || external.invalid ? { invalid: true } : null;\n  }\n\n  public chosenYearHandler(chosenYear: Date, datepicker: MatDatepicker<Date>) {\n    this.control.setValue(chosenYear);\n    datepicker.close();\n  }\n\n  public ngOnDestroy(): void {\n    this._unsubscribe$.next();\n    this._unsubscribe$.complete();\n  }\n}\n",
            "styleUrl": "./input-year.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 78
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-form-field>\n    <mat-label>{{ label }}</mat-label>\n    <input\n        matInput\n        [matDatepicker]=\"yearPicker\"\n        yearAdapter\n        [formControl]=\"control\"\n        [placeholder]=\"placeholder\"\n        [min]=\"minYear\"\n        [max]=\"maxYear\"\n    />\n    <mat-datepicker-toggle matSuffix [for]=\"yearPicker\"></mat-datepicker-toggle>\n    <mat-datepicker\n        #yearPicker\n        startView=\"multi-year\"\n        (yearSelected)=\"chosenYearHandler($event, yearPicker)\"\n        panelClass=\"custom-input-year\">\n    </mat-datepicker>\n</mat-form-field>"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-14d50c40c656c7c554e67d7b19ce22e3f5113381738db7738e84f3b98dc9241e79fde4bb5b71b6f4714fbc5632ab71130b348421b12c96422203aa93c4640667",
            "file": "src/app/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "getPostsList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Post[]>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "MainState.getPostsList"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "userIds$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number[]>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserState.userIds"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "core"
                },
                {
                    "name": "material"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AsyncPipe, JsonPipe } from '@angular/common';\n\nimport { Observable } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { Select, Store } from '@ngxs/store';\n\nimport { MainState } from './store/main.state';\nimport { Post } from '../shared/utils/types/external-api.types';\nimport { GetPosts } from './store/main.actions';\nimport { UserState } from '../store/user/user.state';\n\nconst core = [\n  FormsModule,\n  ReactiveFormsModule,\n  AsyncPipe,\n  JsonPipe,\n]\n\nconst material = [\n  MatFormFieldModule,\n  MatSelectModule,\n  MatCardModule,\n]\n\n@Component({\n  selector: 'app-main',\n  standalone: true,\n  imports: [\n    core,\n    material,\n  ],\n  templateUrl: './main.component.html',\n  styleUrl: './main.component.scss'\n})\nexport class MainComponent implements OnInit {\n  @Select(UserState.userIds)\n  public userIds$!: Observable<number[]>;\n\n  @Select(MainState.getPostsList)\n  public getPostsList$!: Observable<(userId: number) => Post[]>; \n\n  public readonly control = new FormControl(null);\n\n  constructor(private readonly store: Store) {\n    this.store.dispatch(new GetPosts());\n  }\n\n  public ngOnInit(): void {\n    \n  }\n}\n",
            "styleUrl": "./main.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field>\n    <mat-label>Выберите значение</mat-label>\n    <mat-select [formControl]=\"control\">\n        <mat-option [value]=\"null\">Все посты</mat-option>\n        @for (userId of userIds$ | async; track userId) {\n            <mat-option [value]=\"userId\">{{ userId }}</mat-option>\n        }\n    </mat-select>\n</mat-form-field>\n\n\n@if (getPostsList$ | async; as getPostsList) {\n    <div class=\"posts__container\">\n        @for (post of getPostsList(control?.value ?? 0); track post) {\n            <mat-card class=\"post__item\">\n                <mat-card-header>\n                    <mat-card-title>{{ post.title }}</mat-card-title>\n                    <mat-card-subtitle>Пользователь ID {{ post.userId }}</mat-card-subtitle>\n                </mat-card-header>\n        \n                <mat-card-content>{{ post.body }}</mat-card-content>\n            </mat-card>\n        }\n    </div>\n}\n"
        },
        {
            "name": "NestedComponent",
            "id": "component-NestedComponent-deeaf2a3c52745bcebe5cd302a4115ae7ad01e1cd0256881e04f495efc029a408477eaa9a798403d82e208dabd91a84869bbf1b8a65660586baceee0ef5dbe15",
            "file": "src/app/forms/ui/nested/nested.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nested",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nested.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<FormType<NestedFormModel>>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        125,
                        164
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                },
                {
                    "name": "genderOptions",
                    "defaultValue": "GenderOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "flush",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormComponentBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "core"
                },
                {
                    "name": "material"
                },
                {
                    "name": "components",
                    "type": "component"
                },
                {
                    "name": "libs"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NgxsFormPluginModule } from '@ngxs/form-plugin';\nimport { RadioButtonGroupComponent, InputAddressComponent, InputDateComponent } from '@shared/components';\nimport { NestedFormModel } from './utils';\n\nimport { FormComponentBase } from '@shared/classes';\nimport { GenderOptions, GENDER } from '@shared/consts';\nimport { DaDataAddress } from '@shared/types';\nimport { FullNameComponent, FullNameModel } from '@shared/forms';\n\nconst core = [\n  FormsModule, \n  ReactiveFormsModule\n];\n\nconst material = [\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatAutocompleteModule\n];\n\nconst components = [\n  RadioButtonGroupComponent,\n  FullNameComponent,\n  InputAddressComponent,\n  InputDateComponent,\n]\n\nconst libs = [\n  NgxsFormPluginModule,\n]\n\n@Component({\n  selector: 'app-nested',\n  standalone: true,\n  imports: [\n    core,\n    material,\n    components,\n    libs,\n  ],\n  templateUrl: './nested.component.html',\n  styleUrl: './nested.component.scss'\n})\nexport class NestedComponent extends FormComponentBase implements OnInit {\n  public readonly genderOptions = GenderOptions;\n\n  public readonly today = new Date();\n\n  public override form: FormGroup<FormType<NestedFormModel>>;\n\n  constructor(\n    private readonly fb: FormBuilder,\n  ) {\n    super();\n\n    this.form = this.fb.group({\n      gender: this.fb.control<GENDER | null>(GENDER.FEMALE, [Validators.required]),\n      fullName: this.fb.control<FullNameModel | null>(null),\n      birthDate: this.fb.control<Date | null>(null, [Validators.required]),\n      address: this.fb.control<DaDataAddress | null>(null, [Validators.required]),\n    })\n  }\n\n  public ngOnInit(): void {\n    this.form.valueChanges.subscribe(() => console.log(this.form))\n  }\n}\n",
            "styleUrl": "./nested.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "FormComponentBase"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\" class=\"form-block\" ngxsForm=\"forms.nestedForm\">\n    <section class=\"section\">\n        <div class=\"row\">\n            <scb-radio-button-group \n                [options]=\"genderOptions\"\n                formControlName=\"gender\"\n                class=\"col\">\n            </scb-radio-button-group>\n        </div>\n\n        <div class=\"row\">\n            <full-name formControlName=\"fullName\"></full-name>\n        </div>\n\n        <div class=\"row\">\n            <input-date \n                class=\"col\"\n                label=\"Дата рождения\"\n                formControlName=\"birthDate\"\n                [max]=\"today\">\n            </input-date>\n        </div>\n\n        <div class=\"row\">\n            <input-address formControlName=\"address\"></input-address>\n        </div>\n    </section>\n</form>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RadioButtonGroupComponent",
            "id": "component-RadioButtonGroupComponent-741aad705223f1fba44103118e5e1d6670fe8928a3777db18b94ac02273944aef3c95d2cb649fb1253a4c0b850855ad266a30d80e6547b95b53d93f8e800b72e",
            "file": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioButtonGroupComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "scb-radio-button-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./radio-button-group.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "Array<RadioBtnOption>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "string | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "string | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "string | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "string | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "material"
                },
                {
                    "name": "core"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\n\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { MatRadioModule } from '@angular/material/radio';\n\nimport { RadioBtnOption } from './radio-button-group.types';\n\nconst core = [\n  FormsModule,\n  ReactiveFormsModule,\n]\n\nconst material = [\n  MatRadioModule,\n]\n\n@Component({\n  selector: 'scb-radio-button-group',\n  standalone: true,\n  imports: [\n    material,\n    core,\n  ],\n  templateUrl: './radio-button-group.component.html',\n  styleUrl: './radio-button-group.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RadioButtonGroupComponent),\n      multi: true,\n    }\n  ]\n})\nexport class RadioButtonGroupComponent implements ControlValueAccessor, OnInit, OnDestroy {\n\n  @Input('options')\n  public options: Array<RadioBtnOption> = [];\n\n  public readonly control = new FormControl<string | null>(null);\n\n  private readonly _unsubscribe$ = new Subject<void>();\n\n  constructor() {}\n\n  public ngOnInit(): void {}\n\n  public onTouched: (_: string | null) => void = () => {};\n\n  public writeValue(value: string | null): void {\n    value && this.control.setValue(value);\n  }\n\n  public registerOnChange(onChange: (_: string | null) => void): void {\n    this.control.valueChanges\n      .pipe(takeUntil(this._unsubscribe$))\n      .subscribe(onChange);\n  }\n\n  public registerOnTouched(fn: (_: string | null) => void): void {\n    this.onTouched = fn;\n  }\n\n  public ngOnDestroy(): void {\n    this._unsubscribe$.next();\n    this._unsubscribe$.complete();\n  }\n}\n",
            "styleUrl": "./radio-button-group.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 43
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-radio-group class=\"scb-radio-btn-group\" [formControl]=\"control\">\n    @for (option of options; track option) {\n        <mat-radio-button \n            class=\"scb-radio-btn\"\n            [class.scb-radion-btn_selected]=\"control.value === option.value\"\n            [value]=\"option.value\"\n        >\n            {{ option.viewValue }}\n        </mat-radio-button>\n    }\n</mat-radio-group>"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-f3bcdceab76842ebe235da2cb22eddb0c8a43f9ab57a10c78a44d15ef8a33e1254993334888adc6d9c234f8c0cf4e5f1793168f295c77ec0fb616078a8802af0",
            "file": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidenav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "material"
                },
                {
                    "name": "core"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterLink } from '@angular/router';\n\nconst material = [\n  MatSidenavModule,\n  MatListModule,\n  MatIconModule,\n];\n\nconst core = [\n  RouterLink\n]\n\n@Component({\n  selector: 'app-sidenav',\n  standalone: true,\n  imports: [\n    material,\n    core,\n  ],\n  templateUrl: './sidenav.component.html',\n  styleUrl: './sidenav.component.scss',\n})\nexport class SidenavComponent {}\n",
            "styleUrl": "./sidenav.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-drawer-container class=\"sidenav\">\n\t<mat-drawer\n        #drawer\n        mode=\"side\" \n        disableClose=\"true\" \n        opened=\"true\"\n        class=\"sidenav__panel\"\n    >\n\t\t<mat-nav-list class=\"sidenav__list list\">\n\t\t\t<mat-list-item class=\"list__item item\" routerLink=\"/forms\">\n\t\t\t\t<mat-icon class=\"item__icon\">home</mat-icon>\n\t\t\t</mat-list-item>\n\n\t\t\t<mat-list-item class=\"list__item item\" routerLink=\"/\">\n\t\t\t\t<mat-icon class=\"item__icon\">dashboard</mat-icon>\n\t\t\t</mat-list-item>\n\t\t</mat-nav-list>\n\t</mat-drawer>\n\n\t<ng-content select=\"[mainContent]\"></ng-content>\n</mat-drawer-container>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-11cc20dd6deb262dab24fa129e8c1c928b6e3ad25b7a6baecd51cdf0c39b37a96184168482a08c8ace51390ea08dad0437c0d0b2ebdfbc8ee63e1784c03dd773",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, provideRouter } from '@angular/router';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { NgxsFormPluginModule } from '@ngxs/form-plugin';\n\nimport { provideEnvironmentNgxMask } from 'ngx-mask';\n\nimport { TuiDialogModule, TuiRootModule } from '@taiga-ui/core';\nimport { TuiMobileCalendarDialogModule } from '@taiga-ui/addon-mobile';\n\nimport { AppComponent } from './app.component';\nimport { routes } from './app.routes';\nimport { DictionaryState } from './store/dictionary/dictionary.state';\nimport { HeaderComponent } from './shared/ui/layout/header/header.component';\nimport { SidenavComponent } from './shared/ui/layout/sidenav/sidenav.component';\nimport { MainState } from './main/store/main.state';\nimport { UserState } from './store/user/user.state';\nimport { getUserProvider } from './shared/utils/providers/get-user.provider';\nimport { FormsState } from './forms/store/forms.state';\n\nconst store = [\n  DictionaryState,\n  MainState,\n  UserState,\n  FormsState,\n]\n\nconst layout = [\n  HeaderComponent,\n  SidenavComponent,\n]\n\nconst tui = [\n  TuiRootModule,\n  TuiDialogModule,\n  TuiMobileCalendarDialogModule,\n]\n\n@NgModule({\n  // declarations: [AppComponent],\n  imports: [\n    CommonModule,\n    RouterModule,\n    BrowserModule,\n    HttpClientModule,\n    NgxsModule.forRoot(store, { developmentMode: true }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsFormPluginModule.forRoot(),\n    layout,\n    tui,\n  ],\n  providers: [\n    provideRouter(routes), \n    provideAnimationsAsync(),\n    provideEnvironmentNgxMask(),\n    // ATTENTION!\n    // APP_INITIALIZER разрешается после инициализации стейта\n    getUserProvider(),\n  ],\n  // bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SidenavComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    importProvidersFrom([\n      NgxsModule.forRoot(store, { developmentMode: true }),\n      NgxsReduxDevtoolsPluginModule.forRoot(),\n      NgxsFormPluginModule.forRoot(),\n      TuiRootModule,\n    ]),\n    provideEnvironmentNgxMask(),\n    // ATTENTION!\n    // APP_INITIALIZER разрешается после инициализации стейта\n    getUserProvider(),\n    provideHttpClient(),\n  ]\n}"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/forms.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  GroupComponent,\n  NestedComponent,\n  ArrayComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/group/group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  InputYearComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/nested/nested.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  RadioButtonGroupComponent,\n  FullNameComponent,\n  InputAddressComponent,\n  InputDateComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  InputDateComponent,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/main.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n  AsyncPipe,\n  JsonPipe,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/forms.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n  AsyncPipe,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/group/group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule, \n  ReactiveFormsModule,\n  AsyncPipe,\n  JsonPipe,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/nested/nested.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule, \n  ReactiveFormsModule\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-address/input-address.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[FormsModule, ReactiveFormsModule]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/layout/header/header.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  AsyncPipe,\n  FormsModule,\n  ReactiveFormsModule,\n  JsonPipe,\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  RouterLink\n]"
            },
            {
                "name": "customPatterns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/patterns/customPatterns.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    'W': {\n        pattern: /^[a-zA-Zа-яА-Я]+$/i,\n    },\n    '0': {\n        pattern: /[0-9]/,\n    },\n}"
            },
            {
                "name": "defaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/store/main.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MainStateModel",
                "defaultValue": "{\n  posts: [],\n}"
            },
            {
                "name": "defaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/store/forms.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormsStateModel",
                "defaultValue": "{\n  groupForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n  nestedForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n  arrayForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n}"
            },
            {
                "name": "defaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/dictionary/dictionary.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DictionaryStateModel",
                "defaultValue": "{\n  vehicleCategory: [],\n  placeOfRegistration: [],\n  country: [],\n  vehiclePurpose: [],\n  vehicleDocType: [],\n}"
            },
            {
                "name": "defaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user/user.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserStateModel",
                "defaultValue": "{\n  entity: null,\n  entities: [],\n}"
            },
            {
                "name": "DICT_INITIALIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/tokens/dict-initialize.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Observable<boolean>>(\n    'A stream with dictionary initializing flag'\n)"
            },
            {
                "name": "DICT_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/tokens/dict-initialize.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Array<DICTIONARY>>(\n    'Array with dictionary list'\n)"
            },
            {
                "name": "GenderOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/consts/gender.consts.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<RadioBtnOption>",
                "defaultValue": "[\n    {\n        value: GENDER.FEMALE,\n        viewValue: 'Женский'\n    },\n    {\n        value: GENDER.MALE,\n        viewValue: 'Мужской'\n    },\n]"
            },
            {
                "name": "layout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  HeaderComponent,\n  SidenavComponent,\n]"
            },
            {
                "name": "layout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  HeaderComponent,\n  SidenavComponent,\n]"
            },
            {
                "name": "libs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/group/group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  NgxMaskDirective,\n  NgxsFormPluginModule,\n]"
            },
            {
                "name": "libs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/nested/nested.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  NgxsFormPluginModule,\n]"
            },
            {
                "name": "maskito",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MaskitoDirective,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/main.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatFormFieldModule,\n  MatSelectModule,\n  MatCardModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/forms.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatTabsModule,\n  MatButtonModule,\n  MatCardModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/group/group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatAutocompleteModule,\n  MatIconModule,\n  MatButtonModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/nested/nested.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatAutocompleteModule\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatFormFieldModule,\n  MatInputModule,\n  MatButtonModule,\n  MatIconModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-address/input-address.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[MatFormFieldModule, MatInputModule, MatAutocompleteModule]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatInputModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatInputModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatRadioModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/layout/header/header.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatIconModule,\n  MatFormFieldModule,\n  MatSelectModule,\n]"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatSidenavModule,\n  MatListModule,\n  MatIconModule,\n]"
            },
            {
                "name": "MY_FORMATS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  parse: {\n    dateInput: 'YYYY',\n  },\n  display: {\n    dateInput: 'YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
            },
            {
                "name": "store",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  DictionaryState,\n  MainState,\n  UserState,\n  FormsState,\n]"
            },
            {
                "name": "store",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  DictionaryState,\n  MainState,\n  UserState,\n  FormsState,\n]"
            },
            {
                "name": "tui",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  TuiRootModule,\n  TuiDialogModule,\n  TuiDocMainModule,\n  TuiMobileCalendarDialogModule,\n]"
            },
            {
                "name": "tui",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  TuiRootModule,\n  TuiDialogModule,\n  TuiMobileCalendarDialogModule,\n]"
            },
            {
                "name": "tui",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/forms.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  TuiAddonDocModule,\n]"
            },
            {
                "name": "tui",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/group/group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  TuiAddonDocModule,\n]"
            },
            {
                "name": "tui",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  TuiInputDateModule,\n]"
            },
            {
                "name": "utils",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms/ui/group/group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ToUppercaseDirective,\n]"
            },
            {
                "name": "utils",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  FirstCapitalLetterDirective,\n]"
            }
        ],
        "functions": [
            {
                "name": "dictActionFactory",
                "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dictName",
                        "type": "DICTIONARY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Union",
                "jsdoctags": [
                    {
                        "name": "dictName",
                        "type": "DICTIONARY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dictInitializingFactory",
                "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dictList",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "dictList",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dictInitializingProvider",
                "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Provider"
            },
            {
                "name": "distinctUntilObjectChanged",
                "file": "src/app/shared/utils/pipes/distinct-until-object-changed.pipe.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getUserProvider",
                "file": "src/app/shared/utils/providers/get-user.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Provider"
            },
            {
                "name": "pluckContent",
                "file": "src/app/shared/utils/pipes/pluck-content.pipe.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Observable<any>"
            },
            {
                "name": "pluckSuggestions",
                "file": "src/app/shared/utils/pipes/pluck-suggestions.pipe.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Observable<any>"
            },
            {
                "name": "userFactory",
                "file": "src/app/shared/utils/providers/get-user.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Union",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Dictionary.GetVehicleCategory | Dictionary.GetPlaceOfRegistartion | Dictionary.GetCountry | Dictionary.GetVehiclePurpose | Dictionary.GetVehicleDocType",
                "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "DICTIONARY",
                "childs": [
                    {
                        "name": "VEHICLE_CATEGORY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VEHICLE_CATEGORY"
                    },
                    {
                        "name": "PLACE_OF_REGISTRACTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PLACE_OF_REGISTRACTION"
                    },
                    {
                        "name": "COUNTRY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "COUNTRY"
                    },
                    {
                        "name": "VEHICLE_PURPOSE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VEHICLE_PURPOSE"
                    },
                    {
                        "name": "VEHICLE_DOC_TYPE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VEHICLE_DOC_TYPE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/utils/consts/dictionary.consts.ts"
            },
            {
                "name": "FORM_STATUS",
                "childs": [
                    {
                        "name": "VALID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VALID"
                    },
                    {
                        "name": "INVALID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "INVALID"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/utils/consts/form-status.consts.ts"
            },
            {
                "name": "GENDER",
                "childs": [
                    {
                        "name": "FEMALE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FEMALE"
                    },
                    {
                        "name": "MALE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MALE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/utils/consts/gender.consts.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    importProvidersFrom([\n      NgxsModule.forRoot(store, { developmentMode: true }),\n      NgxsReduxDevtoolsPluginModule.forRoot(),\n      NgxsFormPluginModule.forRoot(),\n      TuiRootModule,\n    ]),\n    provideEnvironmentNgxMask(),\n    // ATTENTION!\n    // APP_INITIALIZER разрешается после инициализации стейта\n    getUserProvider(),\n    provideHttpClient(),\n  ]\n}"
                },
                {
                    "name": "store",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  DictionaryState,\n  MainState,\n  UserState,\n  FormsState,\n]"
                }
            ],
            "src/app/forms/forms.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/forms.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  GroupComponent,\n  NestedComponent,\n  ArrayComponent,\n]"
                },
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/forms.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n  AsyncPipe,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/forms.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatTabsModule,\n  MatButtonModule,\n  MatCardModule,\n]"
                },
                {
                    "name": "tui",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/forms.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  TuiAddonDocModule,\n]"
                }
            ],
            "src/app/forms/ui/group/group.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/group/group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  InputYearComponent,\n]"
                },
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/group/group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule, \n  ReactiveFormsModule,\n  AsyncPipe,\n  JsonPipe,\n]"
                },
                {
                    "name": "libs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/group/group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  NgxMaskDirective,\n  NgxsFormPluginModule,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/group/group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatAutocompleteModule,\n  MatIconModule,\n  MatButtonModule,\n]"
                },
                {
                    "name": "tui",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/group/group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  TuiAddonDocModule,\n]"
                },
                {
                    "name": "utils",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/group/group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ToUppercaseDirective,\n]"
                }
            ],
            "src/app/forms/ui/nested/nested.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/nested/nested.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  RadioButtonGroupComponent,\n  FullNameComponent,\n  InputAddressComponent,\n  InputDateComponent,\n]"
                },
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/nested/nested.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule, \n  ReactiveFormsModule\n]"
                },
                {
                    "name": "libs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/nested/nested.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  NgxsFormPluginModule,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/ui/nested/nested.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatAutocompleteModule\n]"
                }
            ],
            "src/app/shared/ui/forms/full-name/full-name.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  InputDateComponent,\n]"
                },
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatFormFieldModule,\n  MatInputModule,\n  MatButtonModule,\n  MatIconModule,\n]"
                },
                {
                    "name": "utils",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FirstCapitalLetterDirective,\n]"
                }
            ],
            "src/app/main/main.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/main.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n  AsyncPipe,\n  JsonPipe,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/main.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatFormFieldModule,\n  MatSelectModule,\n  MatCardModule,\n]"
                }
            ],
            "src/app/shared/ui/components/input-address/input-address.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-address/input-address.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[FormsModule, ReactiveFormsModule]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-address/input-address.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[MatFormFieldModule, MatInputModule, MatAutocompleteModule]"
                }
            ],
            "src/app/shared/ui/components/input-date/input-date.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
                },
                {
                    "name": "maskito",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MaskitoDirective,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatInputModule,\n]"
                },
                {
                    "name": "tui",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-date/input-date.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  TuiInputDateModule,\n]"
                }
            ],
            "src/app/shared/ui/components/input-year/input-year.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatInputModule,\n]"
                },
                {
                    "name": "MY_FORMATS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/input-year/input-year.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  parse: {\n    dateInput: 'YYYY',\n  },\n  display: {\n    dateInput: 'YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
                }
            ],
            "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  FormsModule,\n  ReactiveFormsModule,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatRadioModule,\n]"
                }
            ],
            "src/app/shared/ui/layout/header/header.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/layout/header/header.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  AsyncPipe,\n  FormsModule,\n  ReactiveFormsModule,\n  JsonPipe,\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/layout/header/header.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatIconModule,\n  MatFormFieldModule,\n  MatSelectModule,\n]"
                }
            ],
            "src/app/shared/ui/layout/sidenav/sidenav.component.ts": [
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  RouterLink\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatSidenavModule,\n  MatListModule,\n  MatIconModule,\n]"
                }
            ],
            "src/app/shared/utils/patterns/customPatterns.ts": [
                {
                    "name": "customPatterns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/patterns/customPatterns.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    'W': {\n        pattern: /^[a-zA-Zа-яА-Я]+$/i,\n    },\n    '0': {\n        pattern: /[0-9]/,\n    },\n}"
                }
            ],
            "src/app/main/store/main.state.ts": [
                {
                    "name": "defaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/store/main.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MainStateModel",
                    "defaultValue": "{\n  posts: [],\n}"
                }
            ],
            "src/app/forms/store/forms.state.ts": [
                {
                    "name": "defaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms/store/forms.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormsStateModel",
                    "defaultValue": "{\n  groupForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n  nestedForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n  arrayForm: {\n    model: undefined,\n    dirty: false,\n    status: '',\n    errors: {},\n  },\n}"
                }
            ],
            "src/app/store/dictionary/dictionary.state.ts": [
                {
                    "name": "defaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/dictionary/dictionary.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionaryStateModel",
                    "defaultValue": "{\n  vehicleCategory: [],\n  placeOfRegistration: [],\n  country: [],\n  vehiclePurpose: [],\n  vehicleDocType: [],\n}"
                }
            ],
            "src/app/store/user/user.state.ts": [
                {
                    "name": "defaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user/user.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserStateModel",
                    "defaultValue": "{\n  entity: null,\n  entities: [],\n}"
                }
            ],
            "src/app/shared/utils/tokens/dict-initialize.token.ts": [
                {
                    "name": "DICT_INITIALIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/tokens/dict-initialize.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Observable<boolean>>(\n    'A stream with dictionary initializing flag'\n)"
                },
                {
                    "name": "DICT_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/tokens/dict-initialize.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Array<DICTIONARY>>(\n    'Array with dictionary list'\n)"
                }
            ],
            "src/app/shared/utils/consts/gender.consts.ts": [
                {
                    "name": "GenderOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/consts/gender.consts.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<RadioBtnOption>",
                    "defaultValue": "[\n    {\n        value: GENDER.FEMALE,\n        viewValue: 'Женский'\n    },\n    {\n        value: GENDER.MALE,\n        viewValue: 'Мужской'\n    },\n]"
                }
            ],
            "src/app/app.component.ts": [
                {
                    "name": "layout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  HeaderComponent,\n  SidenavComponent,\n]"
                },
                {
                    "name": "tui",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  TuiRootModule,\n  TuiDialogModule,\n  TuiDocMainModule,\n  TuiMobileCalendarDialogModule,\n]"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "layout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  HeaderComponent,\n  SidenavComponent,\n]"
                },
                {
                    "name": "store",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  DictionaryState,\n  MainState,\n  UserState,\n  FormsState,\n]"
                },
                {
                    "name": "tui",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  TuiRootModule,\n  TuiDialogModule,\n  TuiMobileCalendarDialogModule,\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/utils/providers/dict-initialize.provider.ts": [
                {
                    "name": "dictActionFactory",
                    "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dictName",
                            "type": "DICTIONARY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Union",
                    "jsdoctags": [
                        {
                            "name": "dictName",
                            "type": "DICTIONARY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dictInitializingFactory",
                    "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dictList",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "store",
                            "type": "Store",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "dictList",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "store",
                            "type": "Store",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dictInitializingProvider",
                    "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Provider"
                }
            ],
            "src/app/shared/utils/pipes/distinct-until-object-changed.pipe.ts": [
                {
                    "name": "distinctUntilObjectChanged",
                    "file": "src/app/shared/utils/pipes/distinct-until-object-changed.pipe.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/shared/utils/providers/get-user.provider.ts": [
                {
                    "name": "getUserProvider",
                    "file": "src/app/shared/utils/providers/get-user.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Provider"
                },
                {
                    "name": "userFactory",
                    "file": "src/app/shared/utils/providers/get-user.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "store",
                            "type": "Store",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actions$",
                            "type": "Actions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "store",
                            "type": "Store",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actions$",
                            "type": "Actions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/utils/pipes/pluck-content.pipe.ts": [
                {
                    "name": "pluckContent",
                    "file": "src/app/shared/utils/pipes/pluck-content.pipe.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Observable<any>"
                }
            ],
            "src/app/shared/utils/pipes/pluck-suggestions.pipe.ts": [
                {
                    "name": "pluckSuggestions",
                    "file": "src/app/shared/utils/pipes/pluck-suggestions.pipe.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Observable<any>"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/utils/consts/dictionary.consts.ts": [
                {
                    "name": "DICTIONARY",
                    "childs": [
                        {
                            "name": "VEHICLE_CATEGORY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VEHICLE_CATEGORY"
                        },
                        {
                            "name": "PLACE_OF_REGISTRACTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PLACE_OF_REGISTRACTION"
                        },
                        {
                            "name": "COUNTRY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "COUNTRY"
                        },
                        {
                            "name": "VEHICLE_PURPOSE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VEHICLE_PURPOSE"
                        },
                        {
                            "name": "VEHICLE_DOC_TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VEHICLE_DOC_TYPE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/utils/consts/dictionary.consts.ts"
                }
            ],
            "src/app/shared/utils/consts/form-status.consts.ts": [
                {
                    "name": "FORM_STATUS",
                    "childs": [
                        {
                            "name": "VALID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VALID"
                        },
                        {
                            "name": "INVALID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "INVALID"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/utils/consts/form-status.consts.ts"
                }
            ],
            "src/app/shared/utils/consts/gender.consts.ts": [
                {
                    "name": "GENDER",
                    "childs": [
                        {
                            "name": "FEMALE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FEMALE"
                        },
                        {
                            "name": "MALE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MALE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/utils/consts/gender.consts.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/utils/providers/dict-initialize.provider.ts": [
                {
                    "name": "Union",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Dictionary.GetVehicleCategory | Dictionary.GetPlaceOfRegistartion | Dictionary.GetCountry | Dictionary.GetVehiclePurpose | Dictionary.GetVehicleDocType",
                    "file": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tui",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "store",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "store",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tui",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tui",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/store/forms.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormsAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/store/forms.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/store/forms.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/store/forms.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormsStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/array/array.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/array/utils/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArrayFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "libs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tui",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utils",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/group/utils/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/nested/nested.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NestedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/nested/nested.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/nested/nested.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/nested/nested.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "libs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/nested/nested.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/ui/nested/utils/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NestedFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/store/main.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPosts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/main/store/main.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MainState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main/store/main.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/store/main.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MainStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-address/input-address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputAddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-address/input-address.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-address/input-address.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskito",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-date/input-date.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tui",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputYearComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/input-year/input-year.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MY_FORMATS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/radio-button-group/radio-button-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/components/radio-button-group/radio-button-group.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadioBtnOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/forms/full-name/full-name.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utils",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/forms/full-name/utils/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FullNameModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/layout/header/header.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/layout/header/header.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/layout/sidenav/sidenav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/classes/custom-control-base.class.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CustomControlBase",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/classes/entity-base-state.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EntityState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/classes/form-component-base.class.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/consts/gender.consts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GenderOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/directives/first-capital-letter.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FirstCapitalLetterDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/directives/to-uppercase.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToUppercaseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/patterns/customPatterns.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customPatterns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/pipes/distinct-until-object-changed.pipe.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "distinctUntilObjectChanged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/pipes/pluck-content.pipe.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "pluckContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/pipes/pluck-suggestions.pipe.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "pluckSuggestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dictActionFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dictInitializingFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/providers/dict-initialize.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dictInitializingProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/providers/get-user.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUserProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/providers/get-user.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "userFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/dadata.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DadataService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/dictionary.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DictionaryService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/services/external-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExternalApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/tokens/dict-initialize.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICT_INITIALIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/tokens/dict-initialize.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICT_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dadata.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseDaDataResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dadata.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DaDataAddress",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dadata.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DaDataParty",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseDictContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BaseDictResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CodeDictContent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CountryDictContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriversLicenceTypeDict",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InternalNsiTypeDict",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyDictContent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/external-api.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/external-api.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/external-api.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserAddress",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/types/external-api.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserCompany",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/validators/form-group.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormGroupValidators",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCountry",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPlaceOfRegistartion",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetVehicleCategory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetVehicleDocType",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetVehicleMark",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetVehicleModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetVehiclePowerHorse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetVehiclePurpose",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DictionaryState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DictionaryStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VehicleModelsRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/dictionary/dictionary.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VehiclePowerHorseRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetUsers",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/user/user.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user/user.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}